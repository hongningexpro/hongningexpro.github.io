[{"title":"html基础知识","date":"2018-11-14T14:13:07.000Z","path":"2018/11/14/html基础知识/","text":"因为我不是做前端开发的，源于对技术的热爱以及公司年会要求做一个抽奖器，我打算用前端做界面，Django做后端,所以想系统学习一下这方面知识。考虑到忘得很快，所以想记录下来，不怕大家笑话，留下来也是自己曾经走过的脚印。 html概述和基本结构html概述HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm，一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。 html基本结构一个html的基本结构如下：12345678910&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;网页标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 网页显示内容 &lt;/body&gt;&lt;/html&gt; 第一行是文档声明，第二行“&lt;html&gt;”标签和最后一行“&gt;/html&lt;”定义html文档的整体，“&lt;html&gt;”标签中的‘lang=“en”’定义网页的语言为英文，定义成中文是’lang=”zh-CN”‘,不定义也没什么影响，它一般作为分析统计用。 “&gt;head&lt;”标签和“&gt;body&lt;”标签是它的第一层子元素，“&gt;head&lt;”标签里面负责对网页进行一些设置以及定义标题，设置包括定义网页的编码格式，外链css样式文件和javascript文件等，设置的内容不会显示在网页上，标题的内容会显示在标题栏，“&gt;body&lt;”内编写网页上显示的内容。 HTML文档类型目前常用的两种文档类型是xhtml 1.0和html5xhtml 1.0xhtml 1.0 是html5之前的一个常用的版本，目前许多网站仍然使用此版本。此版本文档用sublime text创建方法： html:xt + tab文档示例：12345678910&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;&lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\"&gt; &lt;title&gt; xhtml 1.0 文档类型 &lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; html5pc端可以使用xhtml 1.0，也可以使用html5，html5是向下兼容的此版本文档用sublime text创建方法： html:5 + tab 或者 ! + tab文档示例：12345678910&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt; html5文档类型 &lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 两种文档的区别1、文档声明和编码声明2、html5新增了标签元素以及元素属性 html注释：html文档代码中可以插入注释，注释是对代码的说明和解释，注释的内容不会显示在页面上，html代码中插入注释的方法是：1&lt;!-- 这是一段注释 --&gt; html标题标签通过 &lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;、&lt;h6&gt;,标签可以在网页上定义6种级别的标题。6种级别的标题表示文档的6级目录层级关系，比如说： &lt;h1&gt;用作主标题，其后是 &lt;h2&gt;，再其次是 &lt;h3&gt;，以此类推。搜索引擎会使用标题将网页的结构和内容编制索引，所以网页上使用标题是很重要的。123&lt;h1&gt;这是一级标题&lt;/h1&gt;&lt;h2&gt;这是二级标题&lt;/h2&gt;&lt;h3&gt;这是三级标题&lt;/h3&gt; html段落标签、换行标签与字符实体html段落标签&lt;p&gt;标签定义一个文本段落，一个段落含有默认的上下间距，段落之间会用这种默认间距隔开，代码如下：1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;段落&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超 文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的 标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm。 &lt;/p&gt; &lt;p&gt;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方 式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网 页可以从一个网页链接跳转到另外一个网页。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; html换行标签代码中成段的文字，直接在代码中回车换行，在渲染成网页时候不认这种换行，如果真想换行，可以在代码的段落中插入&gt;br /&lt;来强制换行，代码如下：12345&lt;p&gt;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用&lt;br /&gt;文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件&lt;br /&gt;渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。&lt;/p&gt; html字符实体代码中成段的文字，如果文字间想空多个空格，在代码中空多个空格，在渲染成网页时只会显示一个空格，如果想显示多个空格，可以使用空格的字符实体,代码如下：12345&lt;!-- 在段落前想缩进两个文字的空格，使用空格的字符实体：&amp;nbsp; --&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用&lt;br /&gt;文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件&lt;br /&gt;渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。&lt;/p&gt; 在网页上显示 “&gt;” 和 “&lt;” 会误认为是标签，想在网页上显示“&gt;”和“&lt;”可以使用它们的字符实体，比如：12345&lt;!-- “&lt;” 和 “&gt;” 的字符实体为 &amp;lt; 和 &amp;gt; --&gt;&lt;p&gt; 3 &amp;lt; 5 &lt;br&gt; 10 &amp;gt; 5&lt;/p&gt; html块标签、含样式的标签html块标签1、&lt;div&gt; 标签 块元素，表示一块内容，没有具体的语义。2、&lt;span&gt; 标签 行内元素，表示一行中的一小段内容，没有具体的语义。 含样式和语义的标签1、&lt;em&gt; 标签 行内元素，表示语气中的强调词2、&lt;i&gt; 标签 行内元素，表示专业词汇3、&lt;b&gt; 标签 行内元素，表示文档中的关键字或者产品名4、&lt;strong&gt; 标签 行内元素，表示非常重要的内容 语义化的标签语义化的标签，就是在布局的时候多使用有语义的标签，搜索引擎在爬网的时候能认识这些标签，理解文档的结构，方便网站的收录。比如：h1标签是表示标题，p标签是表示段落，ul、li标签是表示列表，a标签表示链接，dl、dt、dd表示定义列表等，语义化的标签不多。 html图像标签、绝对路径和相对路径html图像标签&lt;img&gt;标签可以在网页上插入一张图片，它是独立使用的标签，它的常用属性有： src属性 定义图片的引用地址 alt属性 定义图片加载失败时显示的文字，搜索引擎会使用这个文字收录图片、盲人读屏软件会读取这个文字让盲人识别图片，所以此属性非常重要。1&lt;img src=\"images/pic.jpg\" alt=\"产品图片\" /&gt; 绝对路径和相对路径像网页上插入图片这种外部文件，需要定义文件的引用地址，引用外部文件还包括引用外部样式表，javascript等等，引用地址分为绝对地址和相对地址。 绝对地址：相对于磁盘的位置去定位文件的地址 相对地址：相对于引用文件本身去定位被引用的文件地址绝对地址在整体文件迁移时会因为磁盘和顶层目录的改变而找不到文件，相对路径就没有这个问题。相对路径的定义技巧： “ ./ ” 表示当前文件所在目录下，比如：“./pic.jpg” 表示当前目录下的pic.jpg的图片，这个使用时可以省略。 “ ../ ” 表示当前文件所在目录下的上一级目录，比如：“../images/pic.jpg” 表示当前目录下的上一级目录下的images文件夹中的pic.jpg的图片。 html链接标签&lt;a&gt;标签可以在网页上定义一个链接地址，它的常用属性有： href属性 定义跳转的地址 title属性 定义鼠标悬停时弹出的提示文字框 target属性 定义链接窗口打开的位置 target=”_self” 缺省值，新页面替换原来的页面，在原来位置打开 target=”_blank” 新页面会在新开的一个浏览器窗口打开123&lt;a href=\"#\"&gt;&lt;/a&gt; &lt;!-- # 表示链接到页面顶部 --&gt;&lt;a href=\"http://www.itcast.cn/\" title=\"跳转的传智播客网站\"&gt;传智播客&lt;/a&gt;&lt;a href=\"2.html\" target=\"_blank\"&gt;测试页面2&lt;/a&gt; html列表有序列表在网页上定义一个有编号的内容列表可以用&lt;ol&gt;、&lt;li&gt;配合使用来实现，代码如下：12345&lt;ol&gt; &lt;li&gt;列表文字一&lt;/li&gt; &lt;li&gt;列表文字二&lt;/li&gt; &lt;li&gt;列表文字三&lt;/li&gt;&lt;/ol&gt; 无序列表在网页上定义一个无编号的内容列表可以用&lt;ul&gt;、&lt;li&gt;配合使用来实现，代码如下：12345&lt;ul&gt; &lt;li&gt;&lt;a href=\"#\"&gt;新闻标题一&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;新闻标题二&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;新闻标题三&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 在网页上生成的列表，每条项目上会有一个小图标，这个小图标在不同浏览器上显示效果不同，所以一般会用样式去掉默认的小图标，如果需要图标，可以用样式自定义图标，从而达到在不同浏览器上显示的效果相同,实际开发中一般用这种列表。 定义列表定义列表通常用于术语的定义。&lt;dl&gt;标签表示列表的整体。&lt;dt&gt;标签定义术语的题目。&lt;dd&gt;标签是术语的解释。一个&lt;dl&gt;中可以有多个题目和解释，代码如下：123456789101112&lt;h3&gt;前端三大块&lt;/h3&gt;&lt;dl&gt; &lt;dt&gt;html&lt;/dt&gt; &lt;dd&gt;负责页面的结构&lt;/dd&gt; &lt;dt&gt;css&lt;/dt&gt; &lt;dd&gt;负责页面的表现&lt;/dd&gt; &lt;dt&gt;javascript&lt;/dt&gt; &lt;dd&gt;负责页面的行为&lt;/dd&gt;&lt;/dl&gt; html表单表单用于搜集不同类型的用户输入，表单由不同类型的标签组成，相关标签及属性用法如下： 1、&lt;form&gt;标签 定义整体的表单区域 action属性 定义表单数据提交地址method属性 定义表单提交的方式，一般有“get”方式和“post”方式2、&lt;label&gt;标签 为表单元素定义文字标注 3、&lt;input&gt;标签 定义通用的表单元素 type属性 type=”text” 定义单行文本输入框 type=”password” 定义密码输入框 type=”radio” 定义单选框 type=”checkbox” 定义复选框 type=”file” 定义上传文件 type=”submit” 定义提交按钮 type=”reset” 定义重置按钮 type=”button” 定义一个普通按钮 type=”image” 定义图片作为提交按钮，用src属性定义图片地址 type=”hidden” 定义一个隐藏的表单域，用来存储值 value属性 定义表单元素的值 name属性 定义表单元素的名称，此名称是提交数据时的键名4、&lt;textarea&gt;标签 定义多行文本输入框 5、&lt;select&gt;标签 定义下拉表单元素 6、&lt;option&gt;标签 与&lt;select&gt;标签配合，定义下拉表单元素中的选项 注册表单实例：1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;form action=\"http://www...\" method=\"get\"&gt;&lt;p&gt;&lt;label&gt;姓名：&lt;/label&gt;&lt;input type=\"text\" name=\"username\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;label&gt;密码：&lt;/label&gt;&lt;input type=\"password\" name=\"password\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;label&gt;性别：&lt;/label&gt;&lt;input type=\"radio\" name=\"gender\" value=\"0\" /&gt; 男&lt;input type=\"radio\" name=\"gender\" value=\"1\" /&gt; 女&lt;/p&gt;&lt;p&gt;&lt;label&gt;爱好：&lt;/label&gt;&lt;input type=\"checkbox\" name=\"like\" value=\"sing\" /&gt; 唱歌&lt;input type=\"checkbox\" name=\"like\" value=\"run\" /&gt; 跑步&lt;input type=\"checkbox\" name=\"like\" value=\"swiming\" /&gt; 游泳&lt;/p&gt;&lt;p&gt;&lt;label&gt;照片：&lt;/label&gt;&lt;input type=\"file\" name=\"person_pic\"&gt;&lt;/p&gt;&lt;p&gt;&lt;label&gt;个人描述：&lt;/label&gt;&lt;textarea name=\"about\"&gt;&lt;/textarea&gt;&lt;/p&gt;&lt;p&gt;&lt;label&gt;籍贯：&lt;/label&gt;&lt;select name=\"site\"&gt; &lt;option value=\"0\"&gt;北京&lt;/option&gt; &lt;option value=\"1\"&gt;上海&lt;/option&gt; &lt;option value=\"2\"&gt;广州&lt;/option&gt; &lt;option value=\"3\"&gt;深圳&lt;/option&gt;&lt;/select&gt;&lt;/p&gt;&lt;p&gt;&lt;input type=\"submit\" name=\"\" value=\"提交\"&gt;&lt;!-- input类型为submit定义提交按钮 还可以用图片控件代替submit按钮提交，一般会导致提交两次，不建议使用。如： &lt;input type=\"image\" src=\"xxx.gif\"&gt;--&gt;&lt;input type=\"reset\" name=\"\" value=\"重置\"&gt;&lt;/p&gt;&lt;/form&gt; html表格1、&lt;table&gt;标签：声明一个表格，它的常用属性如下： border属性 定义表格的边框，设置值是数值 cellpadding属性 定义单元格内容与边框的距离，设置值是数值 cellspacing属性 定义单元格与单元格之间的距离，设置值是数值 align属性 设置整体表格相对于浏览器窗口的水平对齐方式,设置值有：left | center | right2、&lt;tr&gt;标签：定义表格中的一行 3、&lt;td&gt;和&lt;th&gt;标签：定义一行中的一个单元格，td代表普通单元格，th表示表头单元格，它们的常用属性如下： align 设置单元格中内容的水平对齐方式,设置值有：left | center | right valign 设置单元格中内容的垂直对齐方式 top | middle | bottom colspan 设置单元格水平合并，设置值是数值 rowspan 设置单元格垂直合并，设置值是数值","tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}]},{"title":"MySQL学习之链接查询","date":"2018-11-12T13:36:48.000Z","path":"2018/11/12/MySQL学习之链接查询/","text":"交叉链接 交叉链接的结果可以称之为笛卡尔积,把左表中的数据每一行都与右表中所有行相结合,形成的新表的行数是 左表数据行数*右表数据行数,示例如下 左表 id 姓名 1 小王 2 小李 右表 id 班级 1 一班 2 二班 交叉链接查询结果 id 姓名 id 班级 1 小王 1 一班 1 小王 2 二班 2 小李 1 一班 2 小李 2 二班 交叉链接SQL语句1select * from students cross join classes; 内链接 仅将两个表中满足连接条件的行组合起来作为结果集。在内连接中，只有在两个表中匹配的行才能在结果集中出现等值链接 在连接条件中使用等于号(=)运算符比较被连接列的列值，其查询结果中列出被连接表中的所有列，包括其中的重复列不等值链接 在连接条件使用除等于运算符以外的其它比较运算符比较被连接的列的列值。这些运算符包括&gt;、&gt;=、&lt;=、&lt;、!&gt;、!&lt;和&lt;&gt;自然链接 在连接条件中使用等于(=)运算符比较被连接列的列值，但它使用选择列表指出查询结果集合中所包括的列，并删除连接表中的重复列SQL语句1select 列名 from 左表 inner join 右表 on 左表.xxx = 右表.xxx; 外链接 外联接可以是左向外联接、右向外联接或完整外部联接。在内连接的基础上，还包含表中所有不符合条件的数据行，并将相对应的表列填写NULL左外链接 （左–对应右NULL）1select 列名 from 左表 left join 右表 on 左表.xxx = 右表.xxx; 右外链接 （右–对应左NULL）1select 列名 from 左表 right join 右表 on 左表.xxx = 右表.xxx; 全外链接 完整外部联接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。1select 列名 from 左表 full join 右表 on 左表.xxx = 右表.xxx; 不过这条全外链接语句我用MySQL测试的时候报错了,还有待验证…","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"Unix编程之getopt getopt_long的使用","date":"2018-11-08T15:16:47.000Z","path":"2018/11/08/Unix编程之getopt-getopt-long的使用/","text":"最近在看goaccess源码时候，没想到一开头就被getopt_long这个函数给卡住了。。。不禁感慨自己离大牛的差距真是太大了，没办法，慢慢学习积累，希望自己的坚持早晚能导致自己的质变吧。百度的时候发现了还有getopt这个函数，算是简化版本吧，只支持单字符的命令解析，做linux大型软件开发通常都离不开用户命令参数，下面就来把自己今晚所学到的小小知识点记录下来，以后也能让自己的代码越写越棒! getopt 以下是摘自manpage中对getopt函数相关参数以及相关变量的展示,接下来对每个参数以及变量进行说明一下 1234567#include &lt;unistd.h&gt;int getopt(int argc, char * const argv[], const char *optstring);extern char *optarg;extern int optind, opterr, optopt; argc、argv这两个参数是c语言程序运行的参数变量，通过main函数传递进来，argc代表参数个数，argv是字符串参数数组 optstring这个参数是getopt函数所依赖的参数解释字符串,规则是：字符串中的单独一个字符代表了命令行传递的一个参数,字符后面如果没有冒号,则代表此参数没有对应值,如果有一个或者两个冒号,代表了参数后面有值,一个冒号支持两种传递参数值的方法,值紧挨着参数或者与参数隔一个空格,如果有两个冒号,仅支持紧挨着的写法,比如 “ab:c::d”这个字符串： a参数后面没有任何值 b参数后面有值，可以通过 -b100或者-b 100方式传递 c参数后面有值,只可以通过 -c100的方式传递 d参数后面没有任何值 optarg这是一个char型指针,指向当前参数的值 optind是下一个argv的索引 optopt 不知道什么作用…. opterr如果不希望getopt()打印出错信息，则只要将全域变量opterr设为0即可。 getopt返回值,如果有参数为当前参数字符,没有参数返回-11234567891011121314#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;int main(int argc,char *argv[])&#123; char opt; const char *optstring = \"ab:c::d\"; while((opt = getopt(argc,argv,optstring)) != -1)&#123; printf(\"%c:%s\\t\",opt,optarg); printf(\"optind=%d\\t\",optind); printf(\"next opt is %s\\t\",argv[optind]); printf(\"optopt:%d\\n\",optopt); &#125; return 0;&#125; 编译之后运行效果如下:12345./app -a -b 200 -c100 -da:(null) optind=2 next opt is -b optopt:0b:200 optind=4 next opt is -c100 optopt:0c:100 optind=5 next opt is -d optopt:0d:(null) optind=6 next opt is (null) optopt:0 以上就是getopt的大致用法 getopt_longgetopt_long保留了getopt的用法，并且支持长参数,就是不是单个字符的选项参数12345#include &lt;getopt.h&gt;int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex); 前三个参数和getopt基本上一致 longopts:长参数的结构体配置 longindex:如果longindex非空，它指向的变量将记录当前找到参数符合longopts里的第几个元素的描述，即是longopts的下标值 返回值:对于短选项，返回值同getopt函数；对于长选项，如果flag是NULL，返回val，否则返回0；对于错误情况返回值同getopt函数 struct option 123456struct option &#123; const char *name; /* 参数名称 */ int has_arg; /* 指明是否带有参数 */ int *flag; /* flag=NULL时,返回value;不为空时,*flag=val,返回0 */ int val; /* 用于指定函数找到选项的返回值或flag非空时指定*flag的值*/&#125;; has_arg取值 123no_argument 表明长选项不带参数，如：--name, --helprequired_argument 表明长选项必须带参数，如：--prefix /root或 --prefix=/rootoptional_argument 表明长选项的参数是可选的，如：--help或 –prefix=/root，其它都是错误 下面通过实例代码演示用法 1234567891011121314151617181920#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;getopt.h&gt;int main(int argc,char *argv[])&#123; int o,idx = 0; const char *short_opts = \"abc\"; struct option long_opts[] = &#123; &#123;\"help\",no_argument,NULL,'h'&#125;, &#123;\"ip\",optional_argument,NULL,'i'&#125;, &#123;\"port\",required_argument,NULL,'p'&#125;, &#123;NULL,0,NULL,0&#125; &#125;; while((o = getopt_long(argc,argv,short_opts,long_opts,&amp;idx)) != -1)&#123; printf(\"%c:%s\\t\",o,optarg); printf(\"optind=%d\\t\",optind); printf(\"next opt is %s\\n\",argv[optind]); &#125; return 0;&#125; 结果12345./app --help --port=8800 --ip=127.0.0.1h:(null) optind=2 next opt is --port=8800p:8800 optind=3 next opt is --ip=127.0.0.1i:127.0.0.1 optind=4 next opt is (null)","tags":[{"name":"Linux系统编程","slug":"Linux系统编程","permalink":"http://yoursite.com/tags/Linux系统编程/"}]},{"title":"MySQL查询学习笔记","date":"2018-11-05T13:18:22.000Z","path":"2018/11/05/MySQL查询学习笔记/","text":"数据的准备 创建一个数据库1create database data_test charset=utf8; 创建数据表 students表 123456789create table students( id int unsigned primary key auto_increment not null, name varchar(20) default '', age tinyint unsigned default 0, height decimal(5,2), gender enum('男','女','中性','保密') default '保密', cls_id int unsigned default 0, is_delete bit default 0 ); classes表 1234create table classes ( id int unsigned auto_increment primary key not null, name varchar(30) not null ); 准备数据 12345678910111213141516171819-- 向students表中插入数据insert into students values(0,'小明',18,180.00,2,1,0),(0,'小月月',18,180.00,2,2,1),(0,'彭于晏',29,185.00,1,1,0),(0,'刘德华',59,175.00,1,2,1),(0,'黄蓉',38,160.00,2,1,0),(0,'凤姐',28,150.00,4,2,1),(0,'王祖贤',18,172.00,2,1,1),(0,'周杰伦',36,NULL,1,1,0),(0,'程坤',27,181.00,1,2,0),(0,'刘亦菲',25,166.00,2,2,0),(0,'金星',33,162.00,3,3,1),(0,'静香',12,180.00,2,4,0),(0,'郭靖',12,170.00,1,4,0),(0,'周杰',34,176.00,2,5,0);-- 向classes表中插入数据insert into classes values (0, \"python_01期\"), (0, \"python_02期\"); 查询语句的使用查询所有字段 select * from 表名;1select * from students; 查询指定字段 select 列1,列2,… from 表名;1select name,age from students; 使用as给字段起别名 select 字段 as 名字 … from 表名; 1select name as 姓名,age as 年龄 from students; select 表名.字段 … from 表名 1select students.name,students.age from students; 可以通过as给表起别名 select 别名.字段 … from 表名 as 别名; 1selecct s.name,s.age from students as s; 消除重复行 distinct 字段1select distinct gender from students; 条件查询 比较运算符 select … from 表名 where …; 12345678--查询大于18岁的信息select * from students where age&gt;18;--查询小于18岁的信息select * from students where age&lt;18;--查询小于或者等于18岁的信息select * from students where age&lt;=18;--查询年龄为18岁的所有学生的信息select * from students where age=18; 逻辑运算符 and 1234--18到28之间的所有学生信息select * from students where age&gt;18 and age&lt;28;--18岁以上的女性select * from students where age&gt;18 and gender=\"女\"; or 12--18岁以上或者身高超过180以上select * from students where age&gt;18 or height&gt;180; not 1234--不在18岁以上的女性select * from students where not (age&gt;18 and gender=\"女\");--年龄不是小于或者等于18 并且是女性select * from students where (not age&lt;=18) and gender=\"女\"; 模糊查询 like %替换0个或者多个 _替换1个 12345678910--查询姓名中以 “小” 开始的名字select name from students where name like \"小%\";--查询姓名中有 “小” 所有名字select name from students where name like \"%小%\";--查询有两个字的名字select name from students where name like \"__\";--查询有三个字的名字select name from students where name like \"___\";--查询至少有两个字的名字select name from students where name like \"__%\"; rlike 正则表达式 1234--查询以“周”开始的姓名select name from students where name rlike \"^周.*\";--查询以“周”开始 “伦”结尾的姓名select name from students where name rlike \"^周.*伦$\"; 范围查询 in (1,3,8)表示在一个非连续的范围内 12--查询年龄为18，34的姓名select name,age from students where age in (18,34); not in 不在此非连续范围内 12--查询年龄不是18，34岁的名字select name,age from students where age not in (18,34); not between … and …表示不在一个连续的范围内 12--查询年龄不在18到34岁之间的信息select * from students where age not between 18 and 34; 空判断 is null 12--查询身高为空的信息select * from students where height is null; is not null 12--查询身高不为空的信息select * from students where height is not null; 排序 order by 字段 asc从小到大排序，即升序 desc从大到小排序，即降序1234--查询年龄在18到34岁之间的男性，按照年龄从小到大排序select * from students where age between 18 and 34 order by age asc;--按照年龄从小到大，身高从高到矮的排序select * from students order by age asc,height desc; 聚合函数 count 总数 123--查询男性有多少人，女性有多少人select count(*) from students where gender=\"男\";select count(*) from students where gender=\"女\"; max 最大值 12--查询最大年龄select max(age) from students; min 最小值 sum 求和 12--计算所有人的年龄总和select sum(age) from stundets; avg 平均值 12--计算平均年龄select avg(age) from students; round 四舍五入 round(123.12,1)保留一位小数123.1 12--计算所有人的平均年龄，保留2位小数select round(avg(age),2) from students; 分组 group by 123456--按照性别分组，查询所有的性别select gender from students group by gender;--计算每种性别的人数select gender,count(*) from students group by gender;--计算男性的人数select gender,count(*) from students where gender=\"男\" group by gender; group_concat(…) 12--查询同种性别中的姓名,年龄,身高select gender,group_concat(name,\",\",age,\",\",height) from students group by gender; having 1234--查询平均年龄超过30岁的性别，以及姓名select gender,group_concat(name) from students group by gender having avg(age)&gt;30;--查询每种性别中的人数多于2个的信息select gender,group_concat(name) from students group by gender having count(*)&gt;2; 分页 limit start,count12345678--限制查询出来的数据个数select * from students limit 5;--查询前5个数据select * from students limit 5;--查询id6-10的数据select * from students limit 5,5;--每页显示2个，显示第六页的信息，按照年龄从小到大排序select * from students order by age asc limit 10,2;","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"MySQL基本操作","date":"2018-11-04T12:03:42.000Z","path":"2018/11/04/MySQL基本操作/","text":"数据库操作链接数据库 mysql -u用户名 -p密码 退出数据库 exit/quit/ctrl+d 显示数据库版本1select version(); 显示时间1selecct now(); 查看所有数据库1show databases; 创建数据库 create database 数据库名 (charset=utf-8);12create database mydatabase;create database mydatabase charset=utf-8; 查看创建数据库的语句 show create database 数据库名1show create database mydatabase; 查看当前使用的数据库1select database(); 使用数据库 use 数据库名1use mydatabase 删除数据库 drop database 数据库名1drop database mydatabase; 数据表的操作查看当前数据库中所有表1show tables; 创建表 create table 数据表名字([字段，类型，约束],…)123create table students(id int primary key auto_increment, name varchar(30) not null, age int); 查看表结构 desc 表名;1desc students; 查看表的创建语句 show create table 表名字;1show create table students; 修改表-添加字段 alter table 表名 add 列名 类型;1alter table students add birthday datetime; 修改表-修改字段：不重命名版 alter table 表名 modify 列名 类型及约束1alter table students modify birthday date; 修改表-修改字段：重命名版 alter table 表名 change 原名 新名 类型及约束;1alter table students change birthday birth date dafault \"2001-01-01\" 修改表-删除字段 alter table 表名 drop 列名;1alter table students drop age; 删除表 drop table 表名1drop table students; 数据库增删改查(curd)增加全列插入 insert into 表名 values(…);1insert into students values(0,\"小王\",\"1991-02-14\"); 部分插入 insert into 表名 (列1，…) values(列1值,…);1insert into students (name,birth) values(\"小张\",\"1993-12-22\"); 多行插入 insert into 表名 (列1，…) values(列1值,…),(列1值,…)…; insert into 表名 values(列1值,…),(列1值,…)…；12insert into students (name) values(\"小红\"),(\"小李\");insert into students values(default,\"大张\",default),(default,\"大王\",default); 修改 update 表名 set 列1=值1，列2=值2…where 条件;1update students set name=\"蜘蛛侠\",birth=\"2018-11-04\" where id=3; 查询基本使用查询所有列 select * from 表名1select * from students; 按条件查询 select * from 表名 where 条件;1select * from students where name=\"蜘蛛侠\"; 查询指定列 select 列1,列2,… from 表名;1select id,name from students; 查询定别名 select 字段 as 别名,字段 as 别名… from 表名;1select name as 姓名, birth as 生日 from students; 删除物理删除 delete from 表名 where 条件;12delete from students;delete from students where name=\"蜘蛛侠\"; 逻辑删除 使用一个字段来表示这条信息已经不能使用了，查询时候加上已经删除的不查询12alter table students add is_delete bit default 0;update students set is_delete=1 where id=6;","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"数据库基础-数据类型和约束","date":"2018-11-01T15:20:37.000Z","path":"2018/11/01/数据库基础-数据类型和约束/","text":"数据类型常见数据类型 整数:int,bit 小数:decimal 字符串:varchar,char 日期时间:date,time,datetime 枚举类型:enum特殊类型说明 decimal表示浮点数,如decimal(3,2)表示共存3位数,小数占2位 char表示固定长度的字符串,如char(3),如果填充’ab’时会补一个空格为’ab ‘ varchar表示变长的字符串,如varchar(3)，如果填充’ab’，实际就是’ab’ text类型存储大文本字符串,当字符大于4000时推荐使用 更全的数据类型可以参考这里 约束 主键primary key:物理上存储的顺序 非空not null:此字段不允许填写空置 唯一unique:此字段的值不允许重复 默认default:当不填写此值时会使用默认值，如果填写时以填写为准 外键foreign key:对关系字段进行约束,当为关系字段填写值时,会到关联的表中查询此值是否存在,如果存在则填写成功,如果不存在则填写失败并抛出异常 说明:虽然外键约束可以保证数据的有效性,但是在进行数据的crud(增加，修改，删除，查询)时，都会降低数据库的性能,所以不推荐使用,那么数据的有效性怎么保证呢？答:可以在逻辑层进行控制 数值类型归类(常用) 类型 字节大小 有符号范围(signed) 无符号范围(unsigned) TINYINT 1 -128~127 0~255 SMALLINT 2 -32768~32767 0~65535 MEDIUMINT 3 -8388608~8388607 0~16777215 INT/INTEGER 4 -2147483648~2147483647 0~4294967295 BITINT 8 -9223372036854775808~9223372036854775807 0~18446744073709551615 字符串 类型 字节大小 示例 CHAR 0~255 类型:char(3)输入’ab’,实际存储为’ab ‘,输入’abcd’ 实际存储为 ‘abc’ VARCHAR 0~255 类型:varchar(3) 输 ‘ab’,实际存储为’ab’, 输入’abcd’,实际存储为’abc’ TEXT 0~65535 大文本 日期时间类型 类型 字节大小 示例 DATE 4 ‘2018-11-01’ TIME 3 ‘0:08:00’ DATETIME 8 ‘2018-11-01 0:08:00’ YEAR 1 ‘2017’ TIMESTAMP 4 ‘1920-01-01 00:00:01’UTC~’2038-01-01 00:00:01’UTC","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"网络传输大小端问题","date":"2018-10-30T13:14:05.000Z","path":"2018/10/30/网络传输大小端问题/","text":"网络传输大小端问题我们在边写linux网络编程的时候经常会使用htonl htons等函数用来对int类型 long类型的数据进行本地字节序和网络字节序的转换，而对于字符串类型的数据，就不需要转换呢？ 网络上传输的数据都是字节流,对于一个多字节数值,在进行网络传输的时候,先传递哪个字节?其实是按照传输数据的内存地址由低到高来进行传输的。 在验证上面这一个问题之前，先来看一下大小端的问题 小端字节序是我们比较常见的字节序，个人使用的x86计算机大部分使用小端字节序，其实很好理解,小端法(Little-Endian)就是低位字节排放在内存的低地址端(即该值的起始地址),高位字节排放在内存的高地址端; 大端法(Big-Endian)就是高位字节排放在内存的低地址端(即该值的起始地址),低位字节排放在内存的高地址端 就比如 0x12345678 这个十六进制数字，低位在最右边(理解一下十进制中12345678，从右往左是不是个十百千…)，小端存储法就是0x78在低地址，0x12在高地址;大端0x78在高地址，0x12在低地址，可以用下面这一段代码看看自己是不是小端字节序. 12345678#include &lt;stdio.h&gt;int main()&#123; int val = 0x12345678; char *pVal = (char*)&amp;val; printf(\"%x %x %x %x\\n\",*(pVal+0),*(pVal+1),*(pVal+2),*(pVal+3)); return 0;&#125; 输出结果是:78 56 34 12,证明了我使用的这台计算机是小端字节序 那么字符串在内存中存储形式是怎么样的呢？ 比如”Hello”这个字符串，在内存中则是按照字符串本身从左往右顺序存储，’H’在前，’o’在后。这个则没必要写代码来验证了，太简单… 有了以上基础知识,那么便可以说明第一个问题了 网络上传输数据是按内存地址从低到高按顺序传输,那么传输”Hello”这个字符串的时候，就是按照”H” “e” “l” “l” “o”的顺序依次传输，对方接收的话，也是按照这个顺序把数据存入缓存区,字符串不涉及到大小端存储的规则，所以无需调用字节序转换函数来处理。 如果是 0x12345678 这个数据，那么则是按照0x78 0x56 0x34 0x12这个顺序按字节发送(16进制2位则是一个字节),对方机器如果收到后用int类型来解释这个数据，如果对方机器是小端字节序，那么没问题，收到的数据还是0x12345678，但是如果对方机器是大端字节序,用int来解释则会把高地址数据放在低位 低地址放在高位，变成了0x78563412,就会发生不想要的结果。 结论 所以在字节序相同的平台时间传输数据，进行转换字节序是没必要的，而在不同平台之间，则一定要进行转换","tags":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/tags/网络/"}]},{"title":"JDSpider使用文档","date":"2018-10-29T16:03:25.000Z","path":"2018/10/30/JDSpiderReadme/","text":"JDSpider介绍 JDSpider是一个Python写的京东抢券程序源码 配置文件使用Account.txt文件说明 这是账号cookies配置文件,必须按照指定格式配置 格式: 账号名—-这里随意填写—-cookies 12例如:18959273396----11----abtest=20181028143048053_24; mobilev=html5; sid=84964d12b0e88cf2e3545d93cb8d9925; Ticket.json文件说明 这是优惠券信息文件 格式如下12345678&#123; \"name\":\"东券非自营手机\", \"key\":\"ac496b99aa3b4fde8562ba3e14646cb2\", \"id\":\"15196163\", \"starttime\":\"2018-10-28 21:16:00.950\", 小数点后面为毫秒数 \"submitcnt\":\"3\", 提交次数 \"submitinterval\":\"200\" 提交间隔&#125; YDMConfig.json文件说明 云打码平台配置文件 格式如下123456&#123; \"username\":\"hn_user\", 云打码账号名 \"password\":\"xxxxxx\", 账号密码 \"appid\":6017, 开发者软件id \"appkey\":\"903e515dfee0a2bcabfd4a7f9a5d3daa\" 开发者软件秘钥&#125; 日志文件 抢券结束后在Log目录下会生成response_log.txt 和 result_log.txt文件 response_log.txt 记录了请求京东服务器对方给的回应 result_log.txt 记录了抢券结果，如果有账号成功领取到才会有记录","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]}]