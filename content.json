[{"title":"Makefile之变量","date":"2019-02-12T15:11:23.000Z","path":"2019/02/12/Makefile之变量/","text":"Makefile变量使用Makefile变量赋值符Makefile变量赋值符类似于编程语言中对变量进行赋值的符号,常见的有 = 号,makefile中我目前所知道的有四种赋值符号,分别如下: =:这是最普通的赋值符号，赋值完成后使用变量会变成替换=之后的内容 := :这种方式定义的变量，前面定义的变量不可以使用后边定义的变量，其实可以防止递归定义变量带来的缺陷，下文会有解释。 ?= :这种方式定义的变量，如果前面已经定义过，那么此条定义语句就没有任何作用，也就是只有首次定义才会有效 += :追加定义变量接下来详细解释下每种定义变量的区别1.最普通的= 定义变量，可以在任何位置定义变量，也就是说不一定要先定义,下面请看一个例子123foo=$(bar)bar=$(ugh)ugh=Huh? 那么最后foo的值就是Huh? ，这也就是=定义变量之前先引用之后定义的变量。缺点:这种方式定义变量有明显的缺陷，就是递归定义，请看如下例子：1CFLAGS=$(CFLAGS) -O 12A=$(B)B=$(A) 这样子就会使得make陷入无限的变量展开过程中去，当然make具备检测这种情况的能力，会报错，为了避免上述情况发生，我们就可以使用”:=”符号定义变量2.上面对”:=”已经有了初步介绍，下边请看详细的例子解释:123x :=fooy :=$(x) barx := later 最后的结果就是 y的值是”foo bar” ，x是”later”12y :=$(x) barx :=later 最后的结果就是 y的值是”bar” ，x是”later”3.接下来说一下追加定义变量符号 “+=”12obj=a.o b.oobj+=c.o 最终obj结果就是”a.o b.o c.o”，其等价于12obj=a.o b.oobj :=$(obj) c.o 如果变量之前没有定义过，那么，“+=”会自动变成“=”，如果前面有变量定义，那么“+=”会继承于前次操作的赋值符。如果前一次的是“:=”，那么“+=”会以“:=”作为其赋值符，如：12variable := valuevariable += more 等价于12variable := valuevariable := $(variable) more 但如果是这种情况:12variable = valuevariable += more 由于前次的赋值符是“=”，所以“+=”也会以“=”来做为赋值，那么岂不会发生变量的递补归定义，这是很不好的，所以make会自动为我们解决这个问题，我们不必担心这个问题。 变量的高级用法变量值的替换我们可以替换变量中的共有的部分，其格式是“$(var:a=b)”或是“${var:a=b}”，其意思是，把变量“var”中所有以“a”字串“结尾”的“a”替换成“b”字串。这里的“结尾”意思是“空格”或是“结束符”。例子:12foo := a.o b.o c.obar := $(foo:.o=.c) 这个示例中，我们先定义了一个“$(foo)”变量，而第二行的意思是把“$(foo)”中所有以“.o”字串“结尾”全部替换成“.c”，所以我们的“$(bar)”的值就是“a.c b.c c.c”。把变量的值再当成变量请看如下例子:1234x=yy=Hellovar=$($(x)) 这样子其实就是个嵌套取变量内容，最终var=Hello,这一点有点类似于C语言中的取地址符号&amp;,当然这也可以使用更多层次 override 指示符使用override指示符定义的变量，可以忽略make命令通过命令行参数传入的变量的值，覆盖命令行参数传值的作用。示例:1234567VAR=Hello overridetarget: echo $(VAR)``` 使用make VAR=Ignore命令，也就是传值给VAR变量，结果显示如下: echo IgnoreIgnore123456789也就是说命令行参数传递变量方式会覆盖我们内部定义的变量。那么我们使用override关键字定义的变量呢?```Makefileoverride VAR=Hello overridetarget: echo $(VAR) 同样使用上边的make命令，结果如下:12echo Hello overrideHello override 定义多行变量定义多行变量一般都是用在多行命令中来,使用define关键字可以定义一个变量的值为多行命令示例:1234567define two_echo echo \"Hello define!\" echo \"Hello end!\"endeftarget: $(two_echo) 结果如下:1234echo &quot;Hello define!&quot;Hello define!echo &quot;Hello end!&quot;Hello end! 目标变量见名思意，目标变量是仅仅只针对于某个目标而定义的变量，特点是不会被全局变量所覆盖示例:123456789target1:var=i am target1var=Hello Target varibletarget1: echo $(var)target2: echo $(var) 如果使用make target1命令，结果显示:12echo i am target1i am target1 如果是make target2命令,结果显示:12echo Hello Target varibleHello Target varible 也就是说目标变量针对于某个目标下面的命令有效 模式变量其实这个和目标变量很类似，目标变量是针对某种目标，模式变量是针对某种模式,比如make支持的%模式，%.o就是所有以.o结尾的文件1%.o:var=hello 那么接下来所有以.o结尾的目标使用的变量var都是hello","tags":[{"name":"Linux系统编程","slug":"Linux系统编程","permalink":"http://yoursite.com/tags/Linux系统编程/"}]},{"title":"Makefile基础","date":"2019-02-11T15:11:25.000Z","path":"2019/02/11/Makefile基础/","text":"此文记录了我对makefile学习的一点点笔记,这一篇是基础部分。作为一个linux下的c语言程序员,makefile这种基础技能是我不可缺少的能力。 Makefile基础知识Makefile介绍make命令执行时，首先会在当前目录下寻找命名为”Makefile” 或者是 “makefile”的文件(其实还有其他名字，但是我记不住，无所谓的，常见的开发过程中最常见的这两种名字也完全够用了)。如果在当前目录下找到了此文件,则会按照一定规则执行文件中的内容(命令)。 常见的Makefile书写规则形式如下(下述例子中的名字仅以英文意思命名，容易理解，并不代表真正Makefile书写中一定要按照如此名字):12target:prerequisites command target:目标文件，makefile最常见的功能就是编译出可执行程序，target意思为目标，代表了下面的命令要生成的文件名。其实这只是常见的人们的习惯，如果要从Makefile运行原理上来说，完全不必拘泥于这些不成文的规则。target也可以是一个标签，常见的用法有clean标签，用来清理make所产生的文件。 prerequisites:依赖，也就是生成target所要依赖的文件 command：见名知意，命令的意思Makefile工作原理1.make命令会在当前目录下寻找名字为”Makefile”或”makefile”的文件2.如果找到，它会找文件中第一个目标文件(target)3.如果目标文件冒号后边存在依赖文件,它会找目标冒号后边的依赖文件(prerequisites),依赖文件可以是一个或者多个。如果目标文件不存在或者是依赖文件的修改时间要比目标文件新,会执行下边的命令。如果依赖文件的依赖性也存在，则会进入下边去寻找依赖文件的依赖文件,以确保生成最新的依赖文件,makefile的执行就像是一个递归的过程. 以上解释也是仅凭我个人理解所记录，不大好理解。。。。。抱歉！Makefile中使用变量我们为了简化Makefile的书写，在编译大型项目的情况下，通常会有很多个小文件，为了方便我们添加编译文件而无需改动太大，我们可以使用变量，有点类似c语言中的宏定义。使用变量则需要使用$(变量名)这种格式例子如下:123OBJ=main.o test1.o test2.otarget:$(OBJ) gcc -o target $(OBJ) Makefile小知识点由于我所学习Makefile的文章也是来源于一篇笔记，写的很长，我一下子也没能看完，知识点的梳理不算很好，自己无法很好地整理成很好地知识体系，暂且把一些细小知识点记录下来。 没有依赖文件的目标文件:其实这个在我们平常书写的makefile中非常常见，见得最多的就是make clean这个命令了，通常书写makefile都会写一个clean目标，用来清空自己编译留下的文件。是不是很奇怪clean这个目标文件之后没有任何的依赖文件12clean: rm -rf *.o target 还记得上文说的makefile工作原理吗?make命令会寻找makefile文件中的第一个目标文件，如果我们把上边例子中的内容放在makefile文件最前面，那么它会无条件的执行下面的删除命令(除非当前目录存在一个名字叫做clean的文件),没有依赖文件也就不会去对比目标文件和依赖文件的修改时间。所以通常上边例子中的内容通常会放在makefile文件最下边，通过make clean指定来执行。当然如果存在了clean文件，我们也有办法执行下边的命令，这就得用到伪目标、 .POHOY：通过.PHONY声明的目标，即使当前目录下存在目标文件，也会去执行下边的命令 123.POHNY:cleanclean: rm -rf *.o target 指定执行某个makefile文件:这得用到make命令的-f参数,make -f 文件名,这样子也就可以指定执行当前目录下某个makefile文件 include:这个有点类似c语言的包含头文件，在一个主makefile文件中包含其他子makefile文件，如果包含的文件不在当前目录下，使用make命令时可以使用-I参数来指定目录，和gcc编译的-i参数一模一样。 显示命令:通常书写的makefile文件运行时，都会在终端上打印所执行的命令，如果想要不打印，我们可以再命令前加上@符号 命令出错:每个命令运行完毕，make会检测每个命令的返回值，如果成功继续往下运行，否则终止当前运行并退出，如果想要忽略错误，可以在命令前加上 - 符号","tags":[{"name":"Linux系统编程","slug":"Linux系统编程","permalink":"http://yoursite.com/tags/Linux系统编程/"}]},{"title":"Python之生成器","date":"2018-12-02T12:09:20.000Z","path":"2018/12/02/Python之生成器/","text":"生成器利用迭代器，我们可以在每次迭代获取数据（通过next()方法）时按照特定的规律进行生成。但是我们在实现一个迭代器时，关于当前迭代到的状态需要我们自己记录，进而才能根据当前状态生成下一个数据。为了达到记录当前状态，并配合next()函数进行迭代使用，我们可以采用更简便的语法，即生成器(generator)。生成器是一类特殊的迭代器。 创建生成器方法1列表生成式列表生成式是Python用来生成一个列表的一种简便语法 语法格式:[生成结果表达式 for 元素 in 可迭代对象]例子:12L = [x*2 for x in range(10)]print(L) 运行结果:1[0, 2, 4, 6, 8, 10, 12, 14, 16, 18] 上面是一个简单的列表生成式，其实这东西还可以写的非常复杂，不过本章不是主要讲列表生成式，是为了讲生成器做个基础介绍，就不详细介绍。 生成器生成方法第一种方法很简单，只要把一个列表生成式的 [ ] 改成 ( )123456789In [15]: L = [ x*2 for x in range(5)]In [16]: LOut[16]: [0, 2, 4, 6, 8]In [17]: G = ( x*2 for x in range(5))In [18]: GOut[18]: &lt;generator object &lt;genexpr&gt; at 0x7f626c132db0&gt; 创建 L 和 G 的区别仅在于最外层的 [ ] 和 ( ) ， L 是一个列表，而 G 是一个生成器。我们可以直接打印出列表L的每一个元素，而对于生成器G，我们可以按照迭代器的使用方法来使用，即可以通过next()函数、for循环、list()等方法使用。123456789101112131415161718192021222324In [19]: next(G)Out[19]: 0In [20]: next(G)Out[20]: 2In [21]: next(G)Out[21]: 4In [22]: next(G)Out[22]: 6In [23]: next(G)Out[23]: 8In [24]: next(G)---------------------------------------------------------------------------StopIteration Traceback (most recent call last)&lt;ipython-input-24-380e167d6934&gt; in &lt;module&gt;()----&gt; 1 next(G)StopIteration:In [25]: 123456789101112In [26]: G = ( x*2 for x in range(5))In [27]: for x in G: ....: print(x) ....: 02468In [28]: 创建生成器方法2generator非常强大。如果推算的算法比较复杂，用类似列表生成式的 for 循环无法实现的时候，还可以用函数来实现。我们仍然用迭代器中介绍的斐波那契数列来举例，用迭代器的实现方式：1234567891011121314151617181920212223class Fib(object): def __init__(self,n): self.n = n self.a = 0 self.b = 1 self.current_idx = 0 def __iter__(self): return self def __next__(self): if self.current_idx &lt; self.n: tmp_val = self.a self.a,self.b = (self.b,self.a + self.b) self.current_idx +=1 return tmp_val else: raise StopIterationif __name__ == \"__main__\": f = Fib(10) for i in f: print(i) 现在我们用生成器来实现一下。123456789101112131415161718def Fib(num): a = 0 b = 1 cnt = 0 while cnt &lt; num: cnt +=1 tmp = a a,b = b,a+b yield tmp return \"end\" if __name__ == \"__main__\": f = Fib(10) for i in f: print(\"%d \"%i,end=\"\") print() 运行结果:10 1 1 2 3 5 8 13 21 34 在使用生成器实现的方式中，我们将原本在迭代器next方法中实现的基本逻辑放到一个函数中来实现，但是将每次迭代返回数值的return换成了yield，此时新定义的函数便不再是函数，而是一个生成器了。简单来说：只要在def中有yield关键字的 就称为 生成器。此时按照调用函数的方式( 案例中为f = fib(10) )使用生成器就不再是执行函数体了，而是会返回一个生成器对象（ 案例中为f ），然后就可以按照使用迭代器的方式来使用生成器了。 使用send唤醒我们除了可以使用next()函数来唤醒生成器继续执行外，还可以使用send()函数来唤醒执行。使用send()函数的一个好处是可以在唤醒的同时向断点处传入一个附加数据。 例子：执行到yield时，gen函数作用暂时保存，返回i的值; temp接收下次c.send(“python”)，send发送过来的值，c.next()等价c.send(None)12345678910def gen(): while True: val = yield \"hello\" print(val)if __name__ == \"__main__\": g = gen() print(g.send(None)) print(g.send(\"python\")) 运行结果:123hellopythonhello 第一次使用send的时候不可以传非None参数进去，因为第一次的时候，yield把”hello”返回后就相当于处于断点，此时send过去的数据接收不到。当第二次的时候，程序停在val引用一个数值的地方，send发送过去的数据正好接收 总结 使用了yield关键字的函数不再是函数，而是生成器。（使用了yield的函数就是生成器） yield关键字有两点作用： 保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起 将yield关键字后面表达式的值作为返回值返回，此时可以理解为起到了return的作用 可以使用next()函数让生成器从断点处继续执行，即唤醒生成器（函数）","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python之迭代器","date":"2018-11-29T12:53:25.000Z","path":"2018/11/29/Python之迭代器/","text":"迭代器迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。 可迭代对象在Python中，可以通过for … in …方式进行遍历内部元素的，称之为可迭代对象，就比如list,字典，元祖等类型 如何判断一个对象是否是可迭代对象可以通过isinstance函数来判定，代码示例:1234from collection import Iterableisinstance([],Iterable)isinstance(&#123;&#125;,Iterable) 注意上边的[] {}返回的是一个空的列表 字典对象，可能这种写法比较奇怪通过isinstance的返回值，是True的话就是可迭代对象，是False就是不可迭代的 可迭代对象的本质我们分析对可迭代对象进行迭代使用的过程，发现每迭代一次（即在for…in…中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。那么，在这个过程中就应该有一个“人”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。我们把这个能帮助我们进行数据迭代的“人”称为迭代器(Iterator)。可迭代对象的本质就是可以向我们提供一个这样的中间“人”即迭代器帮助我们对其进行迭代遍历使用。 可迭代对象通过iter方法向我们提供一个迭代器，我们在迭代一个可迭代对象的时候，实际上就是先获取该对象提供的一个迭代器，然后通过这个迭代器来依次获取对象中的每一个数据. 那么也就是说，一个具备了iter方法的对象，就是一个可迭代对象。下面代码实现自己的列表:1234567891011121314151617from collections import Iterableclass MyList(object): def __init__(self): self.inner_list = list() def __iter__(self): pass def add(self,val): self.inner_list.append(val)if __name__ == \"__main__\": ml = MyList() ml.add(1) ml.add(2) ml.add(3) print(isinstance(ml,Iterable)) 运行结果:1True 说明有了iter方法之后，就是一个可迭代对象了 iter()函数和next()函数list、tuple等都是可迭代对象，我们可以通过iter()函数获取这些可迭代对象的迭代器。然后我们可以对获取到的迭代器不断使用next()函数来获取下一条数据。iter()函数实际上就是调用了可迭代对象的iter方法。代码示例:12345678li = [1,2,3,4,5]it = iter(li)print(next(it))print(next(it))print(next(it))print(next(it))print(next(it)) 运行结果:1234512345 如何判断一个对象是否是迭代器可以使用instance函数判断1234from collections import Iteratorprint(\"list is Iterator?\",isinstance([],Iterator))print(\"iter(list) is Iterator?\",isinstance(iter([]),Iterator)) 运行结果:12list is Iterator? Falseiter(list) is Iterator? True 迭代器Iterator通过上面的分析，我们已经知道，迭代器是用来帮助我们记录每次迭代访问到的位置，当我们对迭代器使用next()函数的时候，迭代器会向我们返回它所记录位置的下一个位置的数据。实际上，在使用next()函数的时候，调用的就是迭代器对象的next方法（Python3中是对象的next方法，Python2中是对象的next()方法）。所以，我们要想构造一个迭代器，就要实现它的next方法。但这还不够，python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现iter方法，而iter方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的iter方法返回自身即可。 一个实现了iter方法和next方法的对象，就是迭代器。1234567891011121314151617181920212223242526272829303132333435class MyList(object): def __init__(self): self.inner_list = list() def add(self,val): self.inner_list.append(val) def __iter__(self): return MyIterator(self)class MyIterator(object): def __init__(self,my_list): self.current_idx = 0; self.inner_list = my_list.inner_list def __iter__(self): return self def __next__(self): if self.current_idx &lt; len(self.inner_list): tmp_val = self.inner_list[self.current_idx] self.current_idx +=1 return tmp_val else: raise StopIterationif __name__ == \"__main__\": ml = MyList() ml.add(1) ml.add(2) ml.add(3) ml.add(4) ml.add(5) for i in ml: print(i) 运行结果:1234512345 for … in …的本质通过上面的代码例子，我们不妨来分析下for循环的本质。首先通过对象内部iter方法返回迭代器对象，然后不断地调用迭代器对象内部的next方法，返回内部元素。知道遇到StopIteration异常结束。 迭代器妙用我们发现迭代器最核心的功能就是可以通过next()函数的调用来返回下一个数据值。如果每次返回的数据值不是在一个已有的数据集合中读取的，而是通过程序按照一定的规律计算生成的，那么也就意味着可以不用再依赖一个已有的数据集合，也就是说不用再将所有要迭代的数据都一次性缓存下来供后续依次读取，这样可以节省大量的存储（内存）空间。 举个例子，比如，数学中有个著名的斐波拉契数列（Fibonacci），数列中第一个数为0，第二个数为1，其后的每一个数都可由前两个数相加得到： 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, … 现在我们想要通过for…in…循环来遍历迭代斐波那契数列中的前n个数。那么这个斐波那契数列我们就可以用迭代器来实现，每次迭代都通过数学计算来生成下一个数。1234567891011121314151617181920212223class Fib(object): def __init__(self,n): self.n = n self.a = 0 self.b = 1 self.current_idx = 0 def __iter__(self): return self def __next__(self): if self.current_idx &lt; self.n: tmp_val = self.a self.a,self.b = (self.b,self.a + self.b) self.current_idx +=1 return tmp_val else: raise StopIterationif __name__ == \"__main__\": f = Fib(10) for i in f: print(i) 运行结果:123456789100112358132134 并不是只有for循环能接收可迭代对象除了for循环能接收可迭代对象，list、tuple等也能接收。1234li = list(Fib(10))print(li)tu = tuple(Fib(10))print(tu) 运行结果:12[0, 1, 1, 2, 3, 5, 8, 13, 21, 34](0, 1, 1, 2, 3, 5, 8, 13, 21, 34)","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"心情随笔","date":"2018-11-29T12:01:09.000Z","path":"2018/11/29/心情随笔/","text":"最近遭受的事情真是有点多，每天上班下班的生活，一天天的，在公司也没什么开发需求，代码写不了多少。感觉技术提升很缓慢，这也正是我晚上回来想学学习点新知识的原因之一吧！距离自己还没毕业的实习，到现在正式工作，入了自己很喜欢的行业，也已经快有一年时间了。曾经自己刚出来找工作的时候，怕公司不要我，对于工资这一块完全没有任何想法，能让我进公司干就行了，自己喜欢的事情，真不在乎工资。我在大学的时候想过，以后自己会做什么？看到自己高中同学朋友毕业的早一点的，已经工作了。而自己以后到底能干嘛？从那时候起，我才正视我所喜欢的东西，我喜欢计算机，以后可以做程序员。之后，我甚至有这样的感觉：以后自己不做程序员的话，真想不到我还能做其他的工作了。还好，得益于此，现在的我一点都不后悔当初的选择，并且未来还有很多值得我努力奋斗的。现在想想那时候的自己，也并不会有觉得任何天真之类的感觉。毕竟自己的路都是一步步过来的，我总会慢慢成长有所蜕变的。之前跳了一次槽，现在这份工作也已经干了快四个月了吧，做的是银行的卡前置系统。纯c代码编写，代码量还挺多的，不过我运气还不错，遇到了个大牛师傅，在他的带领下，我慢慢地了解了整个系统的模块架构，可以进行交易的开发，也可以配合测试人员或者其他系统的人快速定位问题，帮助他们解决遇到的问题。进来，感觉到自己对系统的细节还不熟悉，在公司花时间把整个系统代码模块从前往后一点点的看，争取能把百分之八十的细节都看懂，看着别人写的代码，自己也可以学到很多。晚上回来学学自己挺喜欢的语言python，对于python，我的感觉是很是实用，开发快，做点小东西很好。前段时间就自己动手写了个京东抢券的爬虫，和一个爬取企查查企业信息的爬虫，如果用c来写，且不说我能不能做得出来，我得花很多时间来学习底层的一些机制，再自己写出来，很麻烦。比如https请求涉及到的证书，加密这一类东西，估计自己花上一个月的晚上时间都不一定搞得出来吧。不过c语言来做能更加清楚了解底层的知识，理解更加透彻。语言这东西并不能说谁好谁坏，只是在适当的时候选择合适的语言来进行开发，会事半功倍。 自己每天晚上回来，基本上都会学一学python，只是今天回头想想，好多知识点我又忘记了，真是有点可惜。我写博客记录下自己所学的基础知识，是怕自己会忘记，不记下来就什么都没有了，记录下来，以后用到的时候可以看看自己写的博客，看自己写的东西，肯定比别人的要理解得快，毕竟都是自己曾经的思路。现在的我博客上并没有任何自己在某一方面有自己的领悟的知识点，比如linux内核，网络的深奥知识，现在的我要写这些东西还远远不够，以后有自己有所领悟的领域，我应该也会写下来吧，能帮助自己梳理知识，也希望自己的见解可以帮助到其他的人，这还是挺好的。","tags":[]},{"title":"python之装饰器(进阶版)","date":"2018-11-25T14:12:58.000Z","path":"2018/11/25/python之装饰器-进阶版/","text":"有了上一篇装饰器原理的简单介绍，那么可以来探索下装饰器的一些高级用法 装饰器之装饰有参数的函数简单版本的装饰有参数函数上一篇中提到的语法糖装饰器语法是 @函数名 这种格式，相当与 被装饰的函数名 = 函数名(被装饰的函数名) 这样的情况，代码例子如下:12345678def decorator(func): def wrapper(): func() return wrapper@decoratordef test(): print(\"test\") 上面@decorator 也就相当于 test = decorator(test),那么，如果test函数带有参数的情况下，改怎么装饰呢？如果我们不对原有装饰器进行改变，还是用原来的来装饰一个有参数的函数的话，python解释器会提示缺少参数错误。如下代码的例子:12345678910def decorator(func): def wrapper(): func() return wrapper@decoratordef test(arg): print(\"test\",arg)test(\"helloworld\") 运行结果：1234Traceback (most recent call last): File &quot;demo6.py&quot;, line 10, in &lt;module&gt; test(&quot;helloworld&quot;)TypeError: wrapper() takes 0 positional arguments but 1 was given 提示我们wrapper函数调用缺少参数，那么我们不妨从 test = decorator(test) 这行代码的内部运行流程来理解下为啥会出现这样的错误，当 decorator(test) 调用时，返回内部定义的wrapper函数变量，而test是带有参数的，用来引用一个没有参数的wrapper，就报错了。明白了这一点，那么接下来我们就好办，修改代码如下:12345678910def decorator(func): def wrapper(arg): func(arg) return wrapper@decoratordef test(arg): print(\"test\",arg)test(\"helloworld\") 运行结果:1test helloworld 没有任何的问题，好了，这只是一种简单版本的带参数函数装饰器，接下来再看看通用版本的。 通用版本的装饰有参数函数装饰器考虑到一个装饰器的通用性，实际开发过程中可能不仅要装饰一个参数的函数，也可能装饰带有多个参数的函数，就比如要在原有的函数之上添加日志记录功能，原有函数有很多，参数也不尽相同，那么就要写一个通用版本的装饰器。相信大家都学过python的可变长参数这个知识点，函数参数列表中参数名前面加上*，代表传递多个除字典以外普通类型的参数，写上**的话，代表传递多个字典参数，有了这个知识点的基础，那么实现一个通用版本装饰器就很简单，修改上面代码如下:12345678910111213141516def decorator(func): def wrapper(*args,**kwargs): func(*args,*kwargs) return wrapper@decoratordef test1(arg): print(\"test\",arg)@decoratordef test2(arg1,arg2,arg3): print(\"test\",arg1,arg2,arg3)test1(\"helloworld\")test2(\"hello\",\"world\",\"python\") 运行结果:12test helloworldtest hello world python 好了，上面这个装饰器则能满足装饰任何参数个数的函数 装饰带有返回值的函数平时开发过程中，有返回值的函数非常之多，有时候我们要依靠返回值来判断函数执行是否达到了我们的预期效果，那么如何来装饰一个有返回值的函数呢?就比如下面这段代码，我们来装饰一个有返回值的函数12345678910def makeBold(func): def wrapper(*args,**kwargs): func(*args,**kwargs) return wrapper@makeBolddef get_str(info): return infoprint(get_str(\"hello world\")) 运行结果:1None 咦？我们的get_str函数明明有返回值，装饰过后为啥没了呢？原因很简单，因为在内部wrapper函数中，并没有任何的返回值，它仅仅只是调用了一下get_str函数。那么我们不妨对调用函数的结果进行返回，看看情况会怎么样?12345678910def makeBold(func): def wrapper(*args,**kwargs): return \"&lt;b&gt;\" + func(*args,**kwargs) + \"&lt;/b&gt;\" return wrapper@makeBolddef get_str(info): return infoprint(get_str(\"hello world\")) 运行结果:1&lt;b&gt;hello world&lt;/b&gt; 结果在我们的期望之中，那么装饰带有返回值的函数，可以这么来做。 多个装饰器装饰一个函数这个知识点的话先讲原理不太好，我们先从代码的运行结果来看，再进行分析多个装饰器装饰一个函数是怎么样的一个过程123456789101112131415161718192021def add_verity1(func): print(\"装饰验证1功能\") def wrapper(*args,**kwargs): print(\"---验证1功能执行---\") return func(*args,**kwargs) return wrapperdef add_verity2(func): print(\"装饰验证2功能\") def wrapper(*args,**kwargs): print(\"---验证2功能执行---\") return func(*args,**kwargs) return wrapper@add_verity1@add_verity2def test(): print(\"---test---\")test() 运行结果:12345装饰验证2功能装饰验证1功能---验证1功能执行------验证2功能执行------test--- 从运行结果来看，显示装饰了下面verity2的功能，再装饰verity1，函数调用时候是先运行验证1，再运行验证2，最后调用之前函数本身。其实这也不难理解，先装饰verity2，也就是test = add_verity2(test)，此时的test已经变成了引用add_verity2内部的wrapper函数，那么自然也就带上了验证2的功能，然后再装饰verity1，test = add_verity1(test)，此时带上了验证2功能的test再来引用add_verity1内部的wrapper函数。 装饰器带参数如果一个装饰器要可以根据程序员传递的参数来进行装饰不同的功能，可以对装饰器也增加参数，这一点稍微有点复杂，且看代码再来理解123456789101112131415161718192021222324252627def add_verity(verity_type): if verity_type == \"验证1\": def outer_wrapper(func): def inner_wrapper(*args,**kwargs): print(\"---验证1功能执行---\") return func(*args,**kwargs) return inner_wrapper return outer_wrapper elif verity_type == \"验证2\": def outer_wrapper(func): def inner_wrapper(*args,**kwargs): print(\"---验证2功能执行---\") return func(*args,**kwargs) return inner_wrapper return outer_wrapper@add_verity(verity_type=\"验证1\")def test1(): print(\"---test1---\")@add_verity(verity_type=\"验证2\")def test2(): print(\"---test2---\")test1()test2() 运行结果:1234---验证1功能执行------test1------验证2功能执行------test2--- 这样子我们就可以对装饰器传递参数来选择装饰功能，那么上面这一装饰器装饰过程又是怎么样的呢?12341.@add_verity(verity_type=&quot;验证1&quot;)，这行代码，首先是对add_verity(verity_type=&quot;验证1&quot;)的调用2.调用完毕，内部根据传递的参数，运行不同的if分之，假如参数是&quot;验证1&quot;，也就会把验证1分之内部的outer_wrapper引用返回回去，此时也就相当于 @验证1分之下的outer_wrapper3.这样子接下来的就好理解了，test1 = outer_wrapper(test1)，也就是test1引用了验证1分之内部的inner_wrapper函数test2装饰的原理同上 呼~终于熬夜把装饰器的知识点写完了","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python之装饰器","date":"2018-11-25T04:05:14.000Z","path":"2018/11/25/Python之装饰器/","text":"装饰器是python里面比较重要的内容之一，就我个人学习装饰器的历程而言，真是装饰器虐我千百遍，我待装饰器如初恋。。。这东西来来回回学了好多遍，当时是搞明白了，可是工作不会用到，过段时间，回过头来想想装饰器是啥？它的原理是什么？我就又不记得了，所以还是记下来比较好吧！ 装饰器介绍装饰器是一种用来装饰函数的函数，它有两个原则:1.在不改变原函数的代码的情况下装饰函数 2.在不改变原函数调用方式的情况下装饰函数 函数及变量在python中，函数名也是一个变量，可以有赋值等操作。其实在c语言中，函数名的本质也就是一个指向此函数名对应的函数的代码段，有c语言基础可能理解这一点会比较容易代码示例如下:12345def func(): print(\"this is a func\")a = funca() 这段代码运行结果就是”this is a func”，给a赋值func后，a也就是这个函数类型，当然赋值时候不可以在后面加括号，加了括号就是调用函数了，会把func的返回值赋值给a，没有的话a就等于None，在c语言中这么做的话要用函数指针，这一点来说python方便太多了 函数内定义函数有了上面的基础，那么再来看看在函数体内定义函数的情况是咋样的1234567def outer_func(): print(\"before inner_func\") def inner_func(): print(\"i am inner_func\") print(\"after inner_func\")outer_func() 运行结果:12before inner_funcafter inner_func 从运行结果来看，里边定义的函数并没有被调用，也仅仅只是定义的情况，当然我们可以在内部进行调用，对上面代码稍作修改12345678def outer_func(): print(\"before inner_func\") def inner_func(): print(\"i am inner_func\") print(\"after inner_func\") inner_func()outer_func() 运行结果:123before inner_funcafter inner_funci am inner_func 说明在内部调用了inner_func函数 装饰器雏形有了上面两个小知识点的基础，那么就可以来讲一下装饰器了，先自己写一个装饰器原理分解代码,用来统计函数运行时间的装饰函数12345678910111213141516171819202122232425import timedef timer(func): print(func) def wrapper(): start_time = time.time() func() end_time = time.time() print(\"run time is %s\"%(end_time-start_time)) return wrapperdef test1(): time.sleep(2) print(\"this is test1\")def test2(): time.sleep(4) print(\"this is test2\")test1 = timer(test1)test2 = timer(test2)test1()test2() 运行结果如下:123456&lt;function test1 at 0x7f208c7ad510&gt;&lt;function test2 at 0x7f208c7ada60&gt;this is test1run time is 2.002680540084839this is test2run time is 4.004958152770996 解释:上面的代码，前部分都是函数定义部分，没有调用，真正看到程序运行流程的是从test1 = timer(test1),这里开始往后，那么我就从这行代码开始分析。这行代码就是把test1当做参数传给timer函数调用timer，然后把返回结果赋值给test1。那么调用timer的流程就是先打印传递进去的参数，也就是test1，然后定义了一个内部的wrapper函数，wrapper在内部只是定义，并不会被调用。接下来返回wrapper，此时test1就变成了wrapper，test2过程也和上面一样。接下来调用test1，就变成了调用内部的wrapper，那么结果不就显而易见了。 装饰器之语法糖上面就是装饰器的原理分解，当然python语言提供了一个简便的方法，让我们来实现装饰器，也就是装饰器语法糖，在定义函数之前 @函数名 ,就可以使用装饰器了，把上面代码稍作修改:123456789101112131415161718192021222324import timedef timer(func): print(func) def wrapper(): start_time = time.time() func() end_time = time.time() print(\"run time is %s\"%(end_time-start_time)) return wrapper@timerdef test1(): time.sleep(2) print(\"this is test1\")@timerdef test2(): time.sleep(4) print(\"this is test2\")test1()test2() 运行一下，发现逻辑和上面完全一致(统计时间会有所变化)。也就是这种语法糖的效果就相当于我们写的test1 = timer(test1) 好了，装饰器的介绍先告一段落，之后再讲它的一些进阶用法。","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"CSS基础知识","date":"2018-11-21T15:10:13.000Z","path":"2018/11/21/CSS基础知识/","text":"css基本语法及页面引用css基本语法css的定义方法是： 选择器 { 属性:值; 属性:值; 属性:值;} 选择器是将样式和页面元素关联起来的名称，属性是希望设置的样式属性每个属性有一个或多个值。代码示例：12345678910/* css注释 ctrl+shift+\"/\"*/div&#123; width:100px; height:100px; color:red &#125; css页面引入方法：1、外联式：通过link标签，链接到外部样式表到页面中。1&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\"&gt; 2、嵌入式：通过style标签，在网页上创建嵌入的样式表。1234&lt;style type=\"text/css\"&gt; div&#123; width:100px; height:100px; color:red &#125; ......&lt;/style&gt; 3、内联式：通过标签的style属性，在标签上直接写样式。1&lt;div style=\"width:100px; height:100px; color:red \"&gt;......&lt;/div&gt; css文本设置常用的应用文本的css样式： color 设置文字的颜色，如： color:red; font-size 设置文字的大小，如：font-size:12px; font-family 设置文字的字体，如：font-family:’微软雅黑’; font-style 设置字体是否倾斜，如：font-style:’normal’; 设置不倾斜，font-style:’italic’;设置文字倾斜 font-weight 设置文字是否加粗，如：font-weight:bold; 设置加粗 font-weight:normal 设置不加粗 line-height 设置文字的行高，设置行高相当于在每行文字的上下同时加间距， 如：line-height:24px; font 同时设置文字的几个属性，写的顺序有兼容问题，建议按照如下顺序写： font：是否加粗 字号/行高 字体；如： font:normal 12px/36px ‘微软雅黑’; text-decoration 设置文字的下划线，如：text-decoration:none; 将文字下划线去掉 text-indent 设置文字首行缩进，如：text-indent:24px; 设置文字首行缩进24px 行高示例图片 text-align 设置文字水平对齐方式，如text-align:center 设置文字水平居中 css颜色表示法css颜色值主要有三种表示方法：1、颜色名表示，比如：red 红色，gold 金色2、rgb表示，比如：rgb(255,0,0)表示红色3、16进制数值表示，比如：#ff0000 表示红色，这种可以简写成 #f00 css选择器常用的选择器有如下几种：1、标签选择器标签选择器，此种选择器影响范围大，建议尽量应用在层级选择器中。举例：123456*&#123;margin:0;padding:0&#125;div&#123;color:red&#125; &lt;div&gt;....&lt;/div&gt; &lt;!-- 对应以上两条样式 --&gt;&lt;div class=\"box\"&gt;....&lt;/div&gt; &lt;!-- 对应以上两条样式 --&gt; 2、id选择器通过id名来选择元素，元素的id名称不能重复，所以一个样式设置项只能对应于页面上一个元素，不能复用，id名一般给程序使用，所以不推荐使用id作为选择器。举例：123#box&#123;color:red&#125; &lt;div id=\"box\"&gt;....&lt;/div&gt; &lt;!-- 对应以上一条样式，其它元素不允许应用此样式 --&gt; 3、类选择器通过类名来选择元素，一个类可应用于多个元素，一个元素上也可以使用多个类，应用灵活，可复用，是css中应用最多的一种选择器。举例：1234567.red&#123;color:red&#125;.big&#123;font-size:20px&#125;.mt10&#123;margin-top:10px&#125; &lt;div class=\"red\"&gt;....&lt;/div&gt;&lt;h1 class=\"red big mt10\"&gt;....&lt;/h1&gt;&lt;p class=\"red mt10\"&gt;....&lt;/p&gt; 4、层级选择器主要应用在选择父元素下的子元素，或者子元素下面的子元素，可与标签元素结合使用，减少命名，同时也可以通过层级，防止命名冲突。举例：12345678910.box span&#123;color:red&#125;.box .red&#123;color:pink&#125;.red&#123;color:red&#125;&lt;div class=\"box\"&gt; &lt;span&gt;....&lt;/span&gt; &lt;a href=\"#\" class=\"red\"&gt;....&lt;/a&gt;&lt;/div&gt;&lt;h3 class=\"red\"&gt;....&lt;/h3&gt; 5、组选择器多个选择器，如果有同样的样式设置，可以使用组选择器。举例：12345678.box1,.box2,.box3&#123;width:100px;height:100px&#125;.box1&#123;background:red&#125;.box2&#123;background:pink&#125;.box2&#123;background:gold&#125;&lt;div class=\"box1\"&gt;....&lt;/div&gt;&lt;div class=\"box2\"&gt;....&lt;/div&gt;&lt;div class=\"box3\"&gt;....&lt;/div&gt; 6、伪类及伪元素选择器常用的伪类选择器有hover，表示鼠标悬浮在元素上时的状态，伪元素选择器有before和after,它们可以通过样式在元素中插入内容。12345678.box1:hover&#123;color:red&#125;.box2:before&#123;content:'行首文字';&#125;.box3:after&#123;content:'行尾文字';&#125;&lt;div class=\"box1\"&gt;....&lt;/div&gt;&lt;div class=\"box2\"&gt;....&lt;/div&gt;&lt;div class=\"box3\"&gt;....&lt;/div&gt; CSS盒子模型盒子模型解释元素在页面中显示成一个方块，类似一个盒子，CSS盒子模型就是使用现实中盒子来做比喻，帮助我们设置元素对应的样式。把元素叫做盒子，设置对应的样式分别为：盒子的宽度(width)、盒子的高度(height)、盒子的边框(border)、盒子内的内容和边框之间的间距(padding)、盒子与盒子之间的间距(margin)。 设置宽高12width:200px; /* 设置盒子的宽度，此宽度是指盒子内容的宽度，不是盒子整体宽度(难点) */ height:200px; /* 设置盒子的高度，此高度是指盒子内容的高度，不是盒子整体高度(难点) */ 设置边框设置一边的边框，比如顶部边框，可以按如下设置：1234border-top-color:red; /* 设置顶部边框颜色为红色 */ border-top-width:10px; /* 设置顶部边框粗细为10px */ border-top-style:solid; /* 设置顶部边框的线性为实线，常用的有：solid(实线) dashed(虚线) dotted(点线); */ 上面三句可以简写成一句：1border-top:10px solid red; 设置其它三个边的方法和上面一样，把上面的’top’换成’left’就是设置左边，换成’right’就是设置右边，换成’bottom’就是设置底边。 四个边如果设置一样，可以将四个边的设置合并成一句：1border:10px solid red; 设置内间距padding设置盒子四边的内间距，可设置如下：1234padding-top：20px; /* 设置顶部内间距20px */ padding-left:30px; /* 设置左边内间距30px */ padding-right:40px; /* 设置右边内间距40px */ padding-bottom:50px; /* 设置底部内间距50px */ 上面的设置可以简写如下：1padding：20px 40px 50px 30px; /* 四个值按照顺时针方向，分别设置的是 上 右 下 左 四个方向的内边距值。 */ padding后面还可以跟3个值，2个值和1个值，它们分别设置的项目如下：123padding：20px 40px 50px; /* 设置顶部内边距为20px，左右内边距为40px，底部内边距为50px */ padding：20px 40px; /* 设置上下内边距为20px，左右内边距为40px*/ padding：20px; /* 设置四边内边距为20px */ 设置外间距margin外边距的设置方法和padding的设置方法相同，将上面设置项中的’padding’换成’margin’就是外边距设置方法。 盒模型使用技巧及相关问题margin相关技巧1、设置元素水平居中： margin:x auto;2、margin负值让元素位移及边框合并 外边距合并外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下： 1、使用这种特性2、设置一边的外边距，一般设置margin-top3、将元素浮动或者定位 margin-top 塌陷在两个盒子嵌套时候，内部的盒子设置的margin-top会加到外边的盒子上，导致内部的盒子margin-top设置失败，解决方法如下： 1、外部盒子设置一个边框2、外部盒子设置 overflow:hidden3、使用伪元素类：1234.clearfix:before&#123; content: ''; display:table;&#125; css元素溢出当子元素的尺寸超过父元素的尺寸时，需要设置父元素显示溢出的子元素的方式，设置的方法是通过overflow属性来设置。overflow的设置项：1、visible 默认值。内容不会被修剪，会呈现在元素框之外。2、hidden 内容会被修剪，并且其余内容是不可见的，此属性还有清除浮动、清除margin-top塌陷的功能。3、scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。4、auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。5、inherit 规定应该从父元素继承 overflow 属性的值。 块元素、内联元素、内联块元素元素就是标签，布局中常用的有三种标签，块元素、内联元素、内联块元素，了解这三种元素的特性，才能熟练的进行页面布局。 块元素块元素，也可以称为行元素，布局中常用的标签如：div、p、ul、li、h1~h6、dl、dt、dd等等都是块元素，它在布局中的行为： 支持全部的样式 如果没有设置宽度，默认的宽度为父级宽度100% 盒子占据一行、即使设置了宽度内联元素内联元素，也可以称为行内元素，布局中常用的标签如：a、span、em、b、strong、i等等都是内联元素，它们在布局中的行为： 支持部分样式（不支持宽、高、margin上下、padding上下） 宽高由内容决定 盒子并在一行 代码换行，盒子之间会产生间距 子元素是内联元素，父元素可以用text-align属性设置子元素水平对齐方式解决内联元素间隙的方法1、去掉内联元素之间的换行2、将内联元素的父级设置font-size为0，内联元素自身再设置font-size内联块元素内联块元素，也叫行内块元素，是新增的元素类型，现有元素没有归于此类别的，img和input元素的行为类似这种元素，但是也归类于内联元素，我们可以用display属性将块元素或者内联元素转化成这种元素。它们在布局中表现的行为： 支持全部样式 如果没有设置宽高，宽高由内容决定 盒子并在一行 代码换行，盒子会产生间距 这三种元素，可以通过display属性来相互转化，不过实际开发中，块元素用得比较多，所以我们经常把内联元素转化为块元素，少量转化为内联块，而要使用内联元素时，直接使用内联元素，而不用块元素转化了。 display属性display属性是用来设置元素的类型及隐藏的，常用的属性有：1、none 元素隐藏且不占位置2、block 元素以块元素显示3、inline 元素以内联元素显示4、inline-block 元素以内联块元素显示","tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}]},{"title":"html基础知识","date":"2018-11-14T14:13:07.000Z","path":"2018/11/14/html基础知识/","text":"因为我不是做前端开发的，源于对技术的热爱以及公司年会要求做一个抽奖器，我打算用前端做界面，Django做后端,所以想系统学习一下这方面知识。考虑到忘得很快，所以想记录下来，不怕大家笑话，留下来也是自己曾经走过的脚印。 html概述和基本结构html概述HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm，一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。 html基本结构一个html的基本结构如下：12345678910&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;网页标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 网页显示内容 &lt;/body&gt;&lt;/html&gt; 第一行是文档声明，第二行“&lt;html&gt;”标签和最后一行“&gt;/html&lt;”定义html文档的整体，“&lt;html&gt;”标签中的‘lang=“en”’定义网页的语言为英文，定义成中文是’lang=”zh-CN”‘,不定义也没什么影响，它一般作为分析统计用。 “&gt;head&lt;”标签和“&gt;body&lt;”标签是它的第一层子元素，“&gt;head&lt;”标签里面负责对网页进行一些设置以及定义标题，设置包括定义网页的编码格式，外链css样式文件和javascript文件等，设置的内容不会显示在网页上，标题的内容会显示在标题栏，“&gt;body&lt;”内编写网页上显示的内容。 HTML文档类型目前常用的两种文档类型是xhtml 1.0和html5xhtml 1.0xhtml 1.0 是html5之前的一个常用的版本，目前许多网站仍然使用此版本。此版本文档用sublime text创建方法： html:xt + tab文档示例：12345678910&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;&lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\"&gt; &lt;title&gt; xhtml 1.0 文档类型 &lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; html5pc端可以使用xhtml 1.0，也可以使用html5，html5是向下兼容的此版本文档用sublime text创建方法： html:5 + tab 或者 ! + tab文档示例：12345678910&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt; html5文档类型 &lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 两种文档的区别1、文档声明和编码声明2、html5新增了标签元素以及元素属性 html注释：html文档代码中可以插入注释，注释是对代码的说明和解释，注释的内容不会显示在页面上，html代码中插入注释的方法是：1&lt;!-- 这是一段注释 --&gt; html标题标签通过 &lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;、&lt;h6&gt;,标签可以在网页上定义6种级别的标题。6种级别的标题表示文档的6级目录层级关系，比如说： &lt;h1&gt;用作主标题，其后是 &lt;h2&gt;，再其次是 &lt;h3&gt;，以此类推。搜索引擎会使用标题将网页的结构和内容编制索引，所以网页上使用标题是很重要的。123&lt;h1&gt;这是一级标题&lt;/h1&gt;&lt;h2&gt;这是二级标题&lt;/h2&gt;&lt;h3&gt;这是三级标题&lt;/h3&gt; html段落标签、换行标签与字符实体html段落标签&lt;p&gt;标签定义一个文本段落，一个段落含有默认的上下间距，段落之间会用这种默认间距隔开，代码如下：1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;段落&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超 文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的 标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm。 &lt;/p&gt; &lt;p&gt;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方 式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网 页可以从一个网页链接跳转到另外一个网页。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; html换行标签代码中成段的文字，直接在代码中回车换行，在渲染成网页时候不认这种换行，如果真想换行，可以在代码的段落中插入&gt;br /&lt;来强制换行，代码如下：12345&lt;p&gt;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用&lt;br /&gt;文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件&lt;br /&gt;渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。&lt;/p&gt; html字符实体代码中成段的文字，如果文字间想空多个空格，在代码中空多个空格，在渲染成网页时只会显示一个空格，如果想显示多个空格，可以使用空格的字符实体,代码如下：12345&lt;!-- 在段落前想缩进两个文字的空格，使用空格的字符实体：&amp;nbsp; --&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用&lt;br /&gt;文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件&lt;br /&gt;渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。&lt;/p&gt; 在网页上显示 “&gt;” 和 “&lt;” 会误认为是标签，想在网页上显示“&gt;”和“&lt;”可以使用它们的字符实体，比如：12345&lt;!-- “&lt;” 和 “&gt;” 的字符实体为 &amp;lt; 和 &amp;gt; --&gt;&lt;p&gt; 3 &amp;lt; 5 &lt;br&gt; 10 &amp;gt; 5&lt;/p&gt; html块标签、含样式的标签html块标签1、&lt;div&gt; 标签 块元素，表示一块内容，没有具体的语义。2、&lt;span&gt; 标签 行内元素，表示一行中的一小段内容，没有具体的语义。 含样式和语义的标签1、&lt;em&gt; 标签 行内元素，表示语气中的强调词2、&lt;i&gt; 标签 行内元素，表示专业词汇3、&lt;b&gt; 标签 行内元素，表示文档中的关键字或者产品名4、&lt;strong&gt; 标签 行内元素，表示非常重要的内容 语义化的标签语义化的标签，就是在布局的时候多使用有语义的标签，搜索引擎在爬网的时候能认识这些标签，理解文档的结构，方便网站的收录。比如：h1标签是表示标题，p标签是表示段落，ul、li标签是表示列表，a标签表示链接，dl、dt、dd表示定义列表等，语义化的标签不多。 html图像标签、绝对路径和相对路径html图像标签&lt;img&gt;标签可以在网页上插入一张图片，它是独立使用的标签，它的常用属性有： src属性 定义图片的引用地址 alt属性 定义图片加载失败时显示的文字，搜索引擎会使用这个文字收录图片、盲人读屏软件会读取这个文字让盲人识别图片，所以此属性非常重要。1&lt;img src=\"images/pic.jpg\" alt=\"产品图片\" /&gt; 绝对路径和相对路径像网页上插入图片这种外部文件，需要定义文件的引用地址，引用外部文件还包括引用外部样式表，javascript等等，引用地址分为绝对地址和相对地址。 绝对地址：相对于磁盘的位置去定位文件的地址 相对地址：相对于引用文件本身去定位被引用的文件地址绝对地址在整体文件迁移时会因为磁盘和顶层目录的改变而找不到文件，相对路径就没有这个问题。相对路径的定义技巧： “ ./ ” 表示当前文件所在目录下，比如：“./pic.jpg” 表示当前目录下的pic.jpg的图片，这个使用时可以省略。 “ ../ ” 表示当前文件所在目录下的上一级目录，比如：“../images/pic.jpg” 表示当前目录下的上一级目录下的images文件夹中的pic.jpg的图片。 html链接标签&lt;a&gt;标签可以在网页上定义一个链接地址，它的常用属性有： href属性 定义跳转的地址 title属性 定义鼠标悬停时弹出的提示文字框 target属性 定义链接窗口打开的位置 target=”_self” 缺省值，新页面替换原来的页面，在原来位置打开 target=”_blank” 新页面会在新开的一个浏览器窗口打开123&lt;a href=\"#\"&gt;&lt;/a&gt; &lt;!-- # 表示链接到页面顶部 --&gt;&lt;a href=\"http://www.itcast.cn/\" title=\"跳转的传智播客网站\"&gt;传智播客&lt;/a&gt;&lt;a href=\"2.html\" target=\"_blank\"&gt;测试页面2&lt;/a&gt; html列表有序列表在网页上定义一个有编号的内容列表可以用&lt;ol&gt;、&lt;li&gt;配合使用来实现，代码如下：12345&lt;ol&gt; &lt;li&gt;列表文字一&lt;/li&gt; &lt;li&gt;列表文字二&lt;/li&gt; &lt;li&gt;列表文字三&lt;/li&gt;&lt;/ol&gt; 无序列表在网页上定义一个无编号的内容列表可以用&lt;ul&gt;、&lt;li&gt;配合使用来实现，代码如下：12345&lt;ul&gt; &lt;li&gt;&lt;a href=\"#\"&gt;新闻标题一&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;新闻标题二&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;新闻标题三&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 在网页上生成的列表，每条项目上会有一个小图标，这个小图标在不同浏览器上显示效果不同，所以一般会用样式去掉默认的小图标，如果需要图标，可以用样式自定义图标，从而达到在不同浏览器上显示的效果相同,实际开发中一般用这种列表。 定义列表定义列表通常用于术语的定义。&lt;dl&gt;标签表示列表的整体。&lt;dt&gt;标签定义术语的题目。&lt;dd&gt;标签是术语的解释。一个&lt;dl&gt;中可以有多个题目和解释，代码如下：123456789101112&lt;h3&gt;前端三大块&lt;/h3&gt;&lt;dl&gt; &lt;dt&gt;html&lt;/dt&gt; &lt;dd&gt;负责页面的结构&lt;/dd&gt; &lt;dt&gt;css&lt;/dt&gt; &lt;dd&gt;负责页面的表现&lt;/dd&gt; &lt;dt&gt;javascript&lt;/dt&gt; &lt;dd&gt;负责页面的行为&lt;/dd&gt;&lt;/dl&gt; html表单表单用于搜集不同类型的用户输入，表单由不同类型的标签组成，相关标签及属性用法如下： 1、&lt;form&gt;标签 定义整体的表单区域 action属性 定义表单数据提交地址method属性 定义表单提交的方式，一般有“get”方式和“post”方式2、&lt;label&gt;标签 为表单元素定义文字标注 3、&lt;input&gt;标签 定义通用的表单元素 type属性 type=”text” 定义单行文本输入框 type=”password” 定义密码输入框 type=”radio” 定义单选框 type=”checkbox” 定义复选框 type=”file” 定义上传文件 type=”submit” 定义提交按钮 type=”reset” 定义重置按钮 type=”button” 定义一个普通按钮 type=”image” 定义图片作为提交按钮，用src属性定义图片地址 type=”hidden” 定义一个隐藏的表单域，用来存储值 value属性 定义表单元素的值 name属性 定义表单元素的名称，此名称是提交数据时的键名4、&lt;textarea&gt;标签 定义多行文本输入框 5、&lt;select&gt;标签 定义下拉表单元素 6、&lt;option&gt;标签 与&lt;select&gt;标签配合，定义下拉表单元素中的选项 注册表单实例：1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;form action=\"http://www...\" method=\"get\"&gt;&lt;p&gt;&lt;label&gt;姓名：&lt;/label&gt;&lt;input type=\"text\" name=\"username\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;label&gt;密码：&lt;/label&gt;&lt;input type=\"password\" name=\"password\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;label&gt;性别：&lt;/label&gt;&lt;input type=\"radio\" name=\"gender\" value=\"0\" /&gt; 男&lt;input type=\"radio\" name=\"gender\" value=\"1\" /&gt; 女&lt;/p&gt;&lt;p&gt;&lt;label&gt;爱好：&lt;/label&gt;&lt;input type=\"checkbox\" name=\"like\" value=\"sing\" /&gt; 唱歌&lt;input type=\"checkbox\" name=\"like\" value=\"run\" /&gt; 跑步&lt;input type=\"checkbox\" name=\"like\" value=\"swiming\" /&gt; 游泳&lt;/p&gt;&lt;p&gt;&lt;label&gt;照片：&lt;/label&gt;&lt;input type=\"file\" name=\"person_pic\"&gt;&lt;/p&gt;&lt;p&gt;&lt;label&gt;个人描述：&lt;/label&gt;&lt;textarea name=\"about\"&gt;&lt;/textarea&gt;&lt;/p&gt;&lt;p&gt;&lt;label&gt;籍贯：&lt;/label&gt;&lt;select name=\"site\"&gt; &lt;option value=\"0\"&gt;北京&lt;/option&gt; &lt;option value=\"1\"&gt;上海&lt;/option&gt; &lt;option value=\"2\"&gt;广州&lt;/option&gt; &lt;option value=\"3\"&gt;深圳&lt;/option&gt;&lt;/select&gt;&lt;/p&gt;&lt;p&gt;&lt;input type=\"submit\" name=\"\" value=\"提交\"&gt;&lt;!-- input类型为submit定义提交按钮 还可以用图片控件代替submit按钮提交，一般会导致提交两次，不建议使用。如： &lt;input type=\"image\" src=\"xxx.gif\"&gt;--&gt;&lt;input type=\"reset\" name=\"\" value=\"重置\"&gt;&lt;/p&gt;&lt;/form&gt; html表格1、&lt;table&gt;标签：声明一个表格，它的常用属性如下： border属性 定义表格的边框，设置值是数值 cellpadding属性 定义单元格内容与边框的距离，设置值是数值 cellspacing属性 定义单元格与单元格之间的距离，设置值是数值 align属性 设置整体表格相对于浏览器窗口的水平对齐方式,设置值有：left | center | right2、&lt;tr&gt;标签：定义表格中的一行 3、&lt;td&gt;和&lt;th&gt;标签：定义一行中的一个单元格，td代表普通单元格，th表示表头单元格，它们的常用属性如下： align 设置单元格中内容的水平对齐方式,设置值有：left | center | right valign 设置单元格中内容的垂直对齐方式 top | middle | bottom colspan 设置单元格水平合并，设置值是数值 rowspan 设置单元格垂直合并，设置值是数值","tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}]},{"title":"MySQL学习之链接查询","date":"2018-11-12T13:36:48.000Z","path":"2018/11/12/MySQL学习之链接查询/","text":"交叉链接 交叉链接的结果可以称之为笛卡尔积,把左表中的数据每一行都与右表中所有行相结合,形成的新表的行数是 左表数据行数*右表数据行数,示例如下 左表 id 姓名 1 小王 2 小李 右表 id 班级 1 一班 2 二班 交叉链接查询结果 id 姓名 id 班级 1 小王 1 一班 1 小王 2 二班 2 小李 1 一班 2 小李 2 二班 交叉链接SQL语句1select * from students cross join classes; 内链接 仅将两个表中满足连接条件的行组合起来作为结果集。在内连接中，只有在两个表中匹配的行才能在结果集中出现等值链接 在连接条件中使用等于号(=)运算符比较被连接列的列值，其查询结果中列出被连接表中的所有列，包括其中的重复列不等值链接 在连接条件使用除等于运算符以外的其它比较运算符比较被连接的列的列值。这些运算符包括&gt;、&gt;=、&lt;=、&lt;、!&gt;、!&lt;和&lt;&gt;自然链接 在连接条件中使用等于(=)运算符比较被连接列的列值，但它使用选择列表指出查询结果集合中所包括的列，并删除连接表中的重复列SQL语句1select 列名 from 左表 inner join 右表 on 左表.xxx = 右表.xxx; 外链接 外联接可以是左向外联接、右向外联接或完整外部联接。在内连接的基础上，还包含表中所有不符合条件的数据行，并将相对应的表列填写NULL左外链接 （左–对应右NULL）1select 列名 from 左表 left join 右表 on 左表.xxx = 右表.xxx; 右外链接 （右–对应左NULL）1select 列名 from 左表 right join 右表 on 左表.xxx = 右表.xxx; 全外链接 完整外部联接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。1select 列名 from 左表 full join 右表 on 左表.xxx = 右表.xxx; 不过这条全外链接语句我用MySQL测试的时候报错了,还有待验证…","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"Unix编程之getopt getopt_long的使用","date":"2018-11-08T15:16:47.000Z","path":"2018/11/08/Unix编程之getopt-getopt-long的使用/","text":"最近在看goaccess源码时候，没想到一开头就被getopt_long这个函数给卡住了。。。不禁感慨自己离大牛的差距真是太大了，没办法，慢慢学习积累，希望自己的坚持早晚能导致自己的质变吧。百度的时候发现了还有getopt这个函数，算是简化版本吧，只支持单字符的命令解析，做linux大型软件开发通常都离不开用户命令参数，下面就来把自己今晚所学到的小小知识点记录下来，以后也能让自己的代码越写越棒! getopt 以下是摘自manpage中对getopt函数相关参数以及相关变量的展示,接下来对每个参数以及变量进行说明一下 1234567#include &lt;unistd.h&gt;int getopt(int argc, char * const argv[], const char *optstring);extern char *optarg;extern int optind, opterr, optopt; argc、argv这两个参数是c语言程序运行的参数变量，通过main函数传递进来，argc代表参数个数，argv是字符串参数数组 optstring这个参数是getopt函数所依赖的参数解释字符串,规则是：字符串中的单独一个字符代表了命令行传递的一个参数,字符后面如果没有冒号,则代表此参数没有对应值,如果有一个或者两个冒号,代表了参数后面有值,一个冒号支持两种传递参数值的方法,值紧挨着参数或者与参数隔一个空格,如果有两个冒号,仅支持紧挨着的写法,比如 “ab:c::d”这个字符串： a参数后面没有任何值 b参数后面有值，可以通过 -b100或者-b 100方式传递 c参数后面有值,只可以通过 -c100的方式传递 d参数后面没有任何值 optarg这是一个char型指针,指向当前参数的值 optind是下一个argv的索引 optopt 不知道什么作用…. opterr如果不希望getopt()打印出错信息，则只要将全域变量opterr设为0即可。 getopt返回值,如果有参数为当前参数字符,没有参数返回-11234567891011121314#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;int main(int argc,char *argv[])&#123; char opt; const char *optstring = \"ab:c::d\"; while((opt = getopt(argc,argv,optstring)) != -1)&#123; printf(\"%c:%s\\t\",opt,optarg); printf(\"optind=%d\\t\",optind); printf(\"next opt is %s\\t\",argv[optind]); printf(\"optopt:%d\\n\",optopt); &#125; return 0;&#125; 编译之后运行效果如下:12345./app -a -b 200 -c100 -da:(null) optind=2 next opt is -b optopt:0b:200 optind=4 next opt is -c100 optopt:0c:100 optind=5 next opt is -d optopt:0d:(null) optind=6 next opt is (null) optopt:0 以上就是getopt的大致用法 getopt_longgetopt_long保留了getopt的用法，并且支持长参数,就是不是单个字符的选项参数12345#include &lt;getopt.h&gt;int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex); 前三个参数和getopt基本上一致 longopts:长参数的结构体配置 longindex:如果longindex非空，它指向的变量将记录当前找到参数符合longopts里的第几个元素的描述，即是longopts的下标值 返回值:对于短选项，返回值同getopt函数；对于长选项，如果flag是NULL，返回val，否则返回0；对于错误情况返回值同getopt函数 struct option 123456struct option &#123; const char *name; /* 参数名称 */ int has_arg; /* 指明是否带有参数 */ int *flag; /* flag=NULL时,返回value;不为空时,*flag=val,返回0 */ int val; /* 用于指定函数找到选项的返回值或flag非空时指定*flag的值*/&#125;; has_arg取值 123no_argument 表明长选项不带参数，如：--name, --helprequired_argument 表明长选项必须带参数，如：--prefix /root或 --prefix=/rootoptional_argument 表明长选项的参数是可选的，如：--help或 –prefix=/root，其它都是错误 下面通过实例代码演示用法 1234567891011121314151617181920#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;getopt.h&gt;int main(int argc,char *argv[])&#123; int o,idx = 0; const char *short_opts = \"abc\"; struct option long_opts[] = &#123; &#123;\"help\",no_argument,NULL,'h'&#125;, &#123;\"ip\",optional_argument,NULL,'i'&#125;, &#123;\"port\",required_argument,NULL,'p'&#125;, &#123;NULL,0,NULL,0&#125; &#125;; while((o = getopt_long(argc,argv,short_opts,long_opts,&amp;idx)) != -1)&#123; printf(\"%c:%s\\t\",o,optarg); printf(\"optind=%d\\t\",optind); printf(\"next opt is %s\\n\",argv[optind]); &#125; return 0;&#125; 结果12345./app --help --port=8800 --ip=127.0.0.1h:(null) optind=2 next opt is --port=8800p:8800 optind=3 next opt is --ip=127.0.0.1i:127.0.0.1 optind=4 next opt is (null)","tags":[{"name":"Linux系统编程","slug":"Linux系统编程","permalink":"http://yoursite.com/tags/Linux系统编程/"}]},{"title":"MySQL查询学习笔记","date":"2018-11-05T13:18:22.000Z","path":"2018/11/05/MySQL查询学习笔记/","text":"数据的准备 创建一个数据库1create database data_test charset=utf8; 创建数据表 students表 123456789create table students( id int unsigned primary key auto_increment not null, name varchar(20) default '', age tinyint unsigned default 0, height decimal(5,2), gender enum('男','女','中性','保密') default '保密', cls_id int unsigned default 0, is_delete bit default 0 ); classes表 1234create table classes ( id int unsigned auto_increment primary key not null, name varchar(30) not null ); 准备数据 12345678910111213141516171819-- 向students表中插入数据insert into students values(0,'小明',18,180.00,2,1,0),(0,'小月月',18,180.00,2,2,1),(0,'彭于晏',29,185.00,1,1,0),(0,'刘德华',59,175.00,1,2,1),(0,'黄蓉',38,160.00,2,1,0),(0,'凤姐',28,150.00,4,2,1),(0,'王祖贤',18,172.00,2,1,1),(0,'周杰伦',36,NULL,1,1,0),(0,'程坤',27,181.00,1,2,0),(0,'刘亦菲',25,166.00,2,2,0),(0,'金星',33,162.00,3,3,1),(0,'静香',12,180.00,2,4,0),(0,'郭靖',12,170.00,1,4,0),(0,'周杰',34,176.00,2,5,0);-- 向classes表中插入数据insert into classes values (0, \"python_01期\"), (0, \"python_02期\"); 查询语句的使用查询所有字段 select * from 表名;1select * from students; 查询指定字段 select 列1,列2,… from 表名;1select name,age from students; 使用as给字段起别名 select 字段 as 名字 … from 表名; 1select name as 姓名,age as 年龄 from students; select 表名.字段 … from 表名 1select students.name,students.age from students; 可以通过as给表起别名 select 别名.字段 … from 表名 as 别名; 1selecct s.name,s.age from students as s; 消除重复行 distinct 字段1select distinct gender from students; 条件查询 比较运算符 select … from 表名 where …; 12345678--查询大于18岁的信息select * from students where age&gt;18;--查询小于18岁的信息select * from students where age&lt;18;--查询小于或者等于18岁的信息select * from students where age&lt;=18;--查询年龄为18岁的所有学生的信息select * from students where age=18; 逻辑运算符 and 1234--18到28之间的所有学生信息select * from students where age&gt;18 and age&lt;28;--18岁以上的女性select * from students where age&gt;18 and gender=\"女\"; or 12--18岁以上或者身高超过180以上select * from students where age&gt;18 or height&gt;180; not 1234--不在18岁以上的女性select * from students where not (age&gt;18 and gender=\"女\");--年龄不是小于或者等于18 并且是女性select * from students where (not age&lt;=18) and gender=\"女\"; 模糊查询 like %替换0个或者多个 _替换1个 12345678910--查询姓名中以 “小” 开始的名字select name from students where name like \"小%\";--查询姓名中有 “小” 所有名字select name from students where name like \"%小%\";--查询有两个字的名字select name from students where name like \"__\";--查询有三个字的名字select name from students where name like \"___\";--查询至少有两个字的名字select name from students where name like \"__%\"; rlike 正则表达式 1234--查询以“周”开始的姓名select name from students where name rlike \"^周.*\";--查询以“周”开始 “伦”结尾的姓名select name from students where name rlike \"^周.*伦$\"; 范围查询 in (1,3,8)表示在一个非连续的范围内 12--查询年龄为18，34的姓名select name,age from students where age in (18,34); not in 不在此非连续范围内 12--查询年龄不是18，34岁的名字select name,age from students where age not in (18,34); not between … and …表示不在一个连续的范围内 12--查询年龄不在18到34岁之间的信息select * from students where age not between 18 and 34; 空判断 is null 12--查询身高为空的信息select * from students where height is null; is not null 12--查询身高不为空的信息select * from students where height is not null; 排序 order by 字段 asc从小到大排序，即升序 desc从大到小排序，即降序1234--查询年龄在18到34岁之间的男性，按照年龄从小到大排序select * from students where age between 18 and 34 order by age asc;--按照年龄从小到大，身高从高到矮的排序select * from students order by age asc,height desc; 聚合函数 count 总数 123--查询男性有多少人，女性有多少人select count(*) from students where gender=\"男\";select count(*) from students where gender=\"女\"; max 最大值 12--查询最大年龄select max(age) from students; min 最小值 sum 求和 12--计算所有人的年龄总和select sum(age) from stundets; avg 平均值 12--计算平均年龄select avg(age) from students; round 四舍五入 round(123.12,1)保留一位小数123.1 12--计算所有人的平均年龄，保留2位小数select round(avg(age),2) from students; 分组 group by 123456--按照性别分组，查询所有的性别select gender from students group by gender;--计算每种性别的人数select gender,count(*) from students group by gender;--计算男性的人数select gender,count(*) from students where gender=\"男\" group by gender; group_concat(…) 12--查询同种性别中的姓名,年龄,身高select gender,group_concat(name,\",\",age,\",\",height) from students group by gender; having 1234--查询平均年龄超过30岁的性别，以及姓名select gender,group_concat(name) from students group by gender having avg(age)&gt;30;--查询每种性别中的人数多于2个的信息select gender,group_concat(name) from students group by gender having count(*)&gt;2; 分页 limit start,count12345678--限制查询出来的数据个数select * from students limit 5;--查询前5个数据select * from students limit 5;--查询id6-10的数据select * from students limit 5,5;--每页显示2个，显示第六页的信息，按照年龄从小到大排序select * from students order by age asc limit 10,2;","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"MySQL基本操作","date":"2018-11-04T12:03:42.000Z","path":"2018/11/04/MySQL基本操作/","text":"数据库操作链接数据库 mysql -u用户名 -p密码 退出数据库 exit/quit/ctrl+d 显示数据库版本1select version(); 显示时间1selecct now(); 查看所有数据库1show databases; 创建数据库 create database 数据库名 (charset=utf-8);12create database mydatabase;create database mydatabase charset=utf-8; 查看创建数据库的语句 show create database 数据库名1show create database mydatabase; 查看当前使用的数据库1select database(); 使用数据库 use 数据库名1use mydatabase 删除数据库 drop database 数据库名1drop database mydatabase; 数据表的操作查看当前数据库中所有表1show tables; 创建表 create table 数据表名字([字段，类型，约束],…)123create table students(id int primary key auto_increment, name varchar(30) not null, age int); 查看表结构 desc 表名;1desc students; 查看表的创建语句 show create table 表名字;1show create table students; 修改表-添加字段 alter table 表名 add 列名 类型;1alter table students add birthday datetime; 修改表-修改字段：不重命名版 alter table 表名 modify 列名 类型及约束1alter table students modify birthday date; 修改表-修改字段：重命名版 alter table 表名 change 原名 新名 类型及约束;1alter table students change birthday birth date dafault \"2001-01-01\" 修改表-删除字段 alter table 表名 drop 列名;1alter table students drop age; 删除表 drop table 表名1drop table students; 数据库增删改查(curd)增加全列插入 insert into 表名 values(…);1insert into students values(0,\"小王\",\"1991-02-14\"); 部分插入 insert into 表名 (列1，…) values(列1值,…);1insert into students (name,birth) values(\"小张\",\"1993-12-22\"); 多行插入 insert into 表名 (列1，…) values(列1值,…),(列1值,…)…; insert into 表名 values(列1值,…),(列1值,…)…；12insert into students (name) values(\"小红\"),(\"小李\");insert into students values(default,\"大张\",default),(default,\"大王\",default); 修改 update 表名 set 列1=值1，列2=值2…where 条件;1update students set name=\"蜘蛛侠\",birth=\"2018-11-04\" where id=3; 查询基本使用查询所有列 select * from 表名1select * from students; 按条件查询 select * from 表名 where 条件;1select * from students where name=\"蜘蛛侠\"; 查询指定列 select 列1,列2,… from 表名;1select id,name from students; 查询定别名 select 字段 as 别名,字段 as 别名… from 表名;1select name as 姓名, birth as 生日 from students; 删除物理删除 delete from 表名 where 条件;12delete from students;delete from students where name=\"蜘蛛侠\"; 逻辑删除 使用一个字段来表示这条信息已经不能使用了，查询时候加上已经删除的不查询12alter table students add is_delete bit default 0;update students set is_delete=1 where id=6;","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"数据库基础-数据类型和约束","date":"2018-11-01T15:20:37.000Z","path":"2018/11/01/数据库基础-数据类型和约束/","text":"数据类型常见数据类型 整数:int,bit 小数:decimal 字符串:varchar,char 日期时间:date,time,datetime 枚举类型:enum特殊类型说明 decimal表示浮点数,如decimal(3,2)表示共存3位数,小数占2位 char表示固定长度的字符串,如char(3),如果填充’ab’时会补一个空格为’ab ‘ varchar表示变长的字符串,如varchar(3)，如果填充’ab’，实际就是’ab’ text类型存储大文本字符串,当字符大于4000时推荐使用 更全的数据类型可以参考这里 约束 主键primary key:物理上存储的顺序 非空not null:此字段不允许填写空置 唯一unique:此字段的值不允许重复 默认default:当不填写此值时会使用默认值，如果填写时以填写为准 外键foreign key:对关系字段进行约束,当为关系字段填写值时,会到关联的表中查询此值是否存在,如果存在则填写成功,如果不存在则填写失败并抛出异常 说明:虽然外键约束可以保证数据的有效性,但是在进行数据的crud(增加，修改，删除，查询)时，都会降低数据库的性能,所以不推荐使用,那么数据的有效性怎么保证呢？答:可以在逻辑层进行控制 数值类型归类(常用) 类型 字节大小 有符号范围(signed) 无符号范围(unsigned) TINYINT 1 -128~127 0~255 SMALLINT 2 -32768~32767 0~65535 MEDIUMINT 3 -8388608~8388607 0~16777215 INT/INTEGER 4 -2147483648~2147483647 0~4294967295 BITINT 8 -9223372036854775808~9223372036854775807 0~18446744073709551615 字符串 类型 字节大小 示例 CHAR 0~255 类型:char(3)输入’ab’,实际存储为’ab ‘,输入’abcd’ 实际存储为 ‘abc’ VARCHAR 0~255 类型:varchar(3) 输 ‘ab’,实际存储为’ab’, 输入’abcd’,实际存储为’abc’ TEXT 0~65535 大文本 日期时间类型 类型 字节大小 示例 DATE 4 ‘2018-11-01’ TIME 3 ‘0:08:00’ DATETIME 8 ‘2018-11-01 0:08:00’ YEAR 1 ‘2017’ TIMESTAMP 4 ‘1920-01-01 00:00:01’UTC~’2038-01-01 00:00:01’UTC","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"网络传输大小端问题","date":"2018-10-30T13:14:05.000Z","path":"2018/10/30/网络传输大小端问题/","text":"网络传输大小端问题我们在边写linux网络编程的时候经常会使用htonl htons等函数用来对int类型 long类型的数据进行本地字节序和网络字节序的转换，而对于字符串类型的数据，就不需要转换呢？ 网络上传输的数据都是字节流,对于一个多字节数值,在进行网络传输的时候,先传递哪个字节?其实是按照传输数据的内存地址由低到高来进行传输的。 在验证上面这一个问题之前，先来看一下大小端的问题 小端字节序是我们比较常见的字节序，个人使用的x86计算机大部分使用小端字节序，其实很好理解,小端法(Little-Endian)就是低位字节排放在内存的低地址端(即该值的起始地址),高位字节排放在内存的高地址端; 大端法(Big-Endian)就是高位字节排放在内存的低地址端(即该值的起始地址),低位字节排放在内存的高地址端 就比如 0x12345678 这个十六进制数字，低位在最右边(理解一下十进制中12345678，从右往左是不是个十百千…)，小端存储法就是0x78在低地址，0x12在高地址;大端0x78在高地址，0x12在低地址，可以用下面这一段代码看看自己是不是小端字节序. 12345678#include &lt;stdio.h&gt;int main()&#123; int val = 0x12345678; char *pVal = (char*)&amp;val; printf(\"%x %x %x %x\\n\",*(pVal+0),*(pVal+1),*(pVal+2),*(pVal+3)); return 0;&#125; 输出结果是:78 56 34 12,证明了我使用的这台计算机是小端字节序 那么字符串在内存中存储形式是怎么样的呢？ 比如”Hello”这个字符串，在内存中则是按照字符串本身从左往右顺序存储，’H’在前，’o’在后。这个则没必要写代码来验证了，太简单… 有了以上基础知识,那么便可以说明第一个问题了 网络上传输数据是按内存地址从低到高按顺序传输,那么传输”Hello”这个字符串的时候，就是按照”H” “e” “l” “l” “o”的顺序依次传输，对方接收的话，也是按照这个顺序把数据存入缓存区,字符串不涉及到大小端存储的规则，所以无需调用字节序转换函数来处理。 如果是 0x12345678 这个数据，那么则是按照0x78 0x56 0x34 0x12这个顺序按字节发送(16进制2位则是一个字节),对方机器如果收到后用int类型来解释这个数据，如果对方机器是小端字节序，那么没问题，收到的数据还是0x12345678，但是如果对方机器是大端字节序,用int来解释则会把高地址数据放在低位 低地址放在高位，变成了0x78563412,就会发生不想要的结果。 结论 所以在字节序相同的平台时间传输数据，进行转换字节序是没必要的，而在不同平台之间，则一定要进行转换","tags":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/tags/网络/"}]},{"title":"JDSpider使用文档","date":"2018-10-29T16:03:25.000Z","path":"2018/10/30/JDSpiderReadme/","text":"JDSpider介绍 JDSpider是一个Python写的京东抢券程序源码 配置文件使用Account.txt文件说明 这是账号cookies配置文件,必须按照指定格式配置 格式: 账号名—-这里随意填写—-cookies 12例如:18959273396----11----abtest=20181028143048053_24; mobilev=html5; sid=84964d12b0e88cf2e3545d93cb8d9925; Ticket.json文件说明 这是优惠券信息文件 格式如下12345678&#123; \"name\":\"东券非自营手机\", \"key\":\"ac496b99aa3b4fde8562ba3e14646cb2\", \"id\":\"15196163\", \"starttime\":\"2018-10-28 21:16:00.950\", 小数点后面为毫秒数 \"submitcnt\":\"3\", 提交次数 \"submitinterval\":\"200\" 提交间隔&#125; YDMConfig.json文件说明 云打码平台配置文件 格式如下123456&#123; \"username\":\"hn_user\", 云打码账号名 \"password\":\"xxxxxx\", 账号密码 \"appid\":6017, 开发者软件id \"appkey\":\"903e515dfee0a2bcabfd4a7f9a5d3daa\" 开发者软件秘钥&#125; 日志文件 抢券结束后在Log目录下会生成response_log.txt 和 result_log.txt文件 response_log.txt 记录了请求京东服务器对方给的回应 result_log.txt 记录了抢券结果，如果有账号成功领取到才会有记录","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]}]