<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人小站</title>
  
  <subtitle>世间所有相遇,都是久别重逢</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-01T16:30:02.563Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>洪宁</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库基础-数据类型和约束</title>
    <link href="http://yoursite.com/2018/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E7%BA%A6%E6%9D%9F/"/>
    <id>http://yoursite.com/2018/11/01/数据库基础-数据类型和约束/</id>
    <published>2018-11-01T15:20:37.000Z</published>
    <updated>2018-11-01T16:30:02.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><strong>常见数据类型</strong></p><ul><li>整数:int,bit</li><li>小数:decimal</li><li>字符串:varchar,char</li><li>日期时间:date,time,datetime</li><li>枚举类型:enum<br><strong>特殊类型说明</strong></li><li>decimal表示浮点数,如decimal(3,2)表示共存3位数,小数占2位</li><li>char表示固定长度的字符串,如char(3),如果填充’ab’时会补一个空格为’ab ‘</li><li>varchar表示变长的字符串,如varchar(3)，如果填充’ab’，实际就是’ab’</li><li>text类型存储大文本字符串,当字符大于4000时推荐使用</li><li>更全的数据类型可以参考<a href="http://blog.csdn.net/anxpp/article/details/51284106" target="_blank" rel="noopener">这里</a></li></ul><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><ul><li>主键primary key:物理上存储的顺序</li><li>非空not null:此字段不允许填写空置</li><li>唯一unique:此字段的值不允许重复</li><li>默认default:当不填写此值时会使用默认值，如果填写时以填写为准</li><li>外键foreign key:对关系字段进行约束,当为关系字段填写值时,会到关联的表中查询此值是否存在,如果存在则填写成功,如果不存在则填写失败并抛出异常</li><li>说明:虽然外键约束可以保证数据的有效性,但是在进行数据的crud(增加，修改，删除，查询)时，都会降低数据库的性能,所以不推荐使用,那么数据的有效性怎么保证呢？答:可以在逻辑层进行控制</li></ul><h1 id="数值类型归类-常用"><a href="#数值类型归类-常用" class="headerlink" title="数值类型归类(常用)"></a>数值类型归类(常用)</h1><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">字节大小</th><th style="text-align:left">有符号范围(signed)</th><th style="text-align:left">无符号范围(unsigned)</th></tr></thead><tbody><tr><td style="text-align:center">TINYINT</td><td style="text-align:left">1</td><td style="text-align:left">-128~127</td><td style="text-align:left">0~255</td></tr><tr><td style="text-align:center">SMALLINT</td><td style="text-align:left">2</td><td style="text-align:left">-32768~32767</td><td style="text-align:left">0~65535</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:left">3</td><td style="text-align:left">-8388608~8388607</td><td style="text-align:left">0~16777215</td></tr><tr><td style="text-align:center">INT/INTEGER</td><td style="text-align:left">4</td><td style="text-align:left">-2147483648~2147483647</td><td style="text-align:left">0~4294967295</td></tr><tr><td style="text-align:center">BITINT</td><td style="text-align:left">8</td><td style="text-align:left">-9223372036854775808~9223372036854775807</td><td style="text-align:left">0~18446744073709551615</td></tr></tbody></table><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">字节大小</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center">CHAR</td><td style="text-align:left">0~255</td><td style="text-align:left">类型:char(3)输入’ab’,实际存储为’ab ‘,输入’abcd’ 实际存储为 ‘abc’</td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:left">0~255</td><td style="text-align:left">类型:varchar(3) 输 ‘ab’,实际存储为’ab’, 输入’abcd’,实际存储为’abc’</td></tr><tr><td style="text-align:center">TEXT</td><td style="text-align:left">0~65535</td><td style="text-align:left">大文本</td></tr></tbody></table><h1 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h1><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">字节大小</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center">DATE</td><td style="text-align:left">4</td><td style="text-align:left">‘2018-11-01’</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:left">3</td><td style="text-align:left">‘0:08:00’</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:left">8</td><td style="text-align:left">‘2018-11-01 0:08:00’</td></tr><tr><td style="text-align:center">YEAR</td><td style="text-align:left">1</td><td style="text-align:left">‘2017’</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:left">4</td><td style="text-align:left">‘1920-01-01 00:00:01’UTC~’2038-01-01 00:00:01’UTC</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;常见数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数:int,bit&lt;/li&gt;
&lt;li&gt;小数:de
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>网络传输大小端问题</title>
    <link href="http://yoursite.com/2018/10/30/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%A4%A7%E5%B0%8F%E7%AB%AF%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/30/网络传输大小端问题/</id>
    <published>2018-10-30T13:14:05.000Z</published>
    <updated>2018-11-01T15:12:59.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络传输大小端问题"><a href="#网络传输大小端问题" class="headerlink" title="网络传输大小端问题"></a>网络传输大小端问题</h1><p><strong>我们在边写linux网络编程的时候经常会使用htonl htons等函数用来对int类型 long类型的数据进行本地字节序和网络字节序的转换，而对于字符串类型的数据，就不需要转换呢？</strong></p><ul><li>网络上传输的数据都是字节流,对于一个多字节数值,在进行网络传输的时候,先传递哪个字节?其实是按照传输数据的内存地址由低到高来进行传输的。</li></ul><p><strong>在验证上面这一个问题之前，先来看一下大小端的问题</strong></p><ul><li>小端字节序是我们比较常见的字节序，个人使用的x86计算机大部分使用小端字节序，其实很好理解,小端法(Little-Endian)就是低位字节排放在内存的低地址端(即该值的起始地址),高位字节排放在内存的高地址端;</li><li>大端法(Big-Endian)就是高位字节排放在内存的低地址端(即该值的起始地址),低位字节排放在内存的高地址端</li><li>就比如 0x12345678 这个十六进制数字，低位在最右边(理解一下十进制中12345678，从右往左是不是个十百千…)，小端存储法就是0x78在低地址，0x12在高地址;大端0x78在高地址，0x12在低地址，可以用下面这一段代码看看自己是不是小端字节序.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> val = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="keyword">char</span> *pVal = (<span class="keyword">char</span>*)&amp;val;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x %x %x %x\n"</span>,*(pVal+<span class="number">0</span>),*(pVal+<span class="number">1</span>),*(pVal+<span class="number">2</span>),*(pVal+<span class="number">3</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果是:78 56 34 12,证明了我使用的这台计算机是小端字节序</li></ul><p><strong>那么字符串在内存中存储形式是怎么样的呢？</strong></p><ul><li>比如”Hello”这个字符串，在内存中则是按照字符串本身从左往右顺序存储，’H’在前，’o’在后。这个则没必要写代码来验证了，太简单…</li></ul><p><strong>有了以上基础知识,那么便可以说明第一个问题了</strong></p><ul><li>网络上传输数据是按内存地址从低到高按顺序传输,那么传输”Hello”这个字符串的时候，就是按照”H” “e” “l” “l” “o”的顺序依次传输，对方接收的话，也是按照这个顺序把数据存入缓存区,字符串不涉及到大小端存储的规则，所以无需调用字节序转换函数来处理。</li><li>如果是 0x12345678 这个数据，那么则是按照0x78 0x56 0x34 0x12这个顺序按字节发送(16进制2位则是一个字节),对方机器如果收到后用int类型来解释这个数据，如果对方机器是小端字节序，那么没问题，收到的数据还是0x12345678，但是如果对方机器是大端字节序,用int来解释则会把高地址数据放在低位 低地址放在高位，变成了0x78563412,就会发生不想要的结果。</li></ul><p><strong>结论</strong></p><ul><li>所以在字节序相同的平台时间传输数据，进行转换字节序是没必要的，而在不同平台之间，则一定要进行转换</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络传输大小端问题&quot;&gt;&lt;a href=&quot;#网络传输大小端问题&quot; class=&quot;headerlink&quot; title=&quot;网络传输大小端问题&quot;&gt;&lt;/a&gt;网络传输大小端问题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;我们在边写linux网络编程的时候经常会使用htonl htons等
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>JDSpider使用文档</title>
    <link href="http://yoursite.com/2018/10/30/JDSpiderReadme/"/>
    <id>http://yoursite.com/2018/10/30/JDSpiderReadme/</id>
    <published>2018-10-29T16:03:25.000Z</published>
    <updated>2018-11-01T15:12:43.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置文件使用"><a href="#配置文件使用" class="headerlink" title="配置文件使用"></a>配置文件使用</h1><h2 id="Account-txt文件说明"><a href="#Account-txt文件说明" class="headerlink" title="Account.txt文件说明"></a>Account.txt文件说明</h2><ul><li>这是账号cookies配置文件,必须按照指定格式配置</li><li>格式: 账号名—-这里随意填写—-cookies</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如:</span><br><span class="line">18959273396----11----abtest=20181028143048053_24; mobilev=html5; sid=84964d12b0e88cf2e3545d93cb8d9925;</span><br></pre></td></tr></table></figure><h2 id="Ticket-json文件说明"><a href="#Ticket-json文件说明" class="headerlink" title="Ticket.json文件说明"></a>Ticket.json文件说明</h2><ul><li>这是优惠券信息文件</li><li>格式如下<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"东券非自营手机"</span>,</span><br><span class="line">    <span class="attr">"key"</span>:<span class="string">"ac496b99aa3b4fde8562ba3e14646cb2"</span>,</span><br><span class="line">    <span class="attr">"id"</span>:<span class="string">"15196163"</span>,</span><br><span class="line">    "starttime":"2018-10-28 21:16:00.950",  小数点后面为毫秒数</span><br><span class="line">    "submitcnt":"3",提交次数</span><br><span class="line">    "submitinterval":"200"提交间隔</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="YDMConfig-json文件说明"><a href="#YDMConfig-json文件说明" class="headerlink" title="YDMConfig.json文件说明"></a>YDMConfig.json文件说明</h2><ul><li>云打码平台配置文件</li><li>格式如下<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "username":"hn_user",    云打码账号名</span><br><span class="line">    "password":"xxxxxx", 账号密码</span><br><span class="line">    "appid":6017, 开发者软件id</span><br><span class="line">    "appkey":"903e515dfee0a2bcabfd4a7f9a5d3daa"开发者软件秘钥</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h1><ul><li>抢券结束后在Log目录下会生成response_log.txt  和 result_log.txt文件</li><li>response_log.txt 记录了请求京东服务器对方给的回应</li><li>result_log.txt 记录了抢券结果，如果有账号成功领取到才会有记录</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置文件使用&quot;&gt;&lt;a href=&quot;#配置文件使用&quot; class=&quot;headerlink&quot; title=&quot;配置文件使用&quot;&gt;&lt;/a&gt;配置文件使用&lt;/h1&gt;&lt;h2 id=&quot;Account-txt文件说明&quot;&gt;&lt;a href=&quot;#Account-txt文件说明&quot; class
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>
