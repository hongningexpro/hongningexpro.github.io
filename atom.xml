<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人小站</title>
  
  <subtitle>孤独是一种常态</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-29T15:40:57.855Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>洪宁</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python之迭代器</title>
    <link href="http://yoursite.com/2018/11/29/Python%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://yoursite.com/2018/11/29/Python之迭代器/</id>
    <published>2018-11-29T12:53:25.000Z</published>
    <updated>2018-11-29T15:40:57.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><h2 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h2><p>在Python中，可以通过for … in …方式进行遍历内部元素的，称之为可迭代对象，就比如list,字典，元祖等类型</p><h2 id="如何判断一个对象是否是可迭代对象"><a href="#如何判断一个对象是否是可迭代对象" class="headerlink" title="如何判断一个对象是否是可迭代对象"></a>如何判断一个对象是否是可迭代对象</h2><p>可以通过isinstance函数来判定，代码示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collection <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line">isinstance([],Iterable)</span><br><span class="line">isinstance(&#123;&#125;,Iterable)</span><br></pre></td></tr></table></figure></p><p>注意上边的[] {}返回的是一个空的列表 字典对象，可能这种写法比较奇怪<br>通过isinstance的返回值，是True的话就是可迭代对象，是False就是不可迭代的</p><h2 id="可迭代对象的本质"><a href="#可迭代对象的本质" class="headerlink" title="可迭代对象的本质"></a>可迭代对象的本质</h2><p>我们分析对可迭代对象进行迭代使用的过程，发现每迭代一次（即在for…in…中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。那么，在这个过程中就应该有一个“人”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。我们把这个能帮助我们进行数据迭代的“人”称为迭代器(Iterator)。<br>可迭代对象的本质就是可以向我们提供一个这样的中间“人”即迭代器帮助我们对其进行迭代遍历使用。</p><p>可迭代对象通过<strong>iter</strong>方法向我们提供一个迭代器，我们在迭代一个可迭代对象的时候，实际上就是先获取该对象提供的一个迭代器，然后通过这个迭代器来依次获取对象中的每一个数据.</p><p>那么也就是说，一个具备了<strong>iter</strong>方法的对象，就是一个可迭代对象。<br>下面代码实现自己的列表:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.inner_list = list()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self,val)</span>:</span></span><br><span class="line">        self.inner_list.append(val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    ml = MyList()</span><br><span class="line">    ml.add(<span class="number">1</span>)</span><br><span class="line">    ml.add(<span class="number">2</span>)</span><br><span class="line">    ml.add(<span class="number">3</span>)</span><br><span class="line">    print(isinstance(ml,Iterable))</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure></p><p>说明有了<strong>iter</strong>方法之后，就是一个可迭代对象了</p><h2 id="iter-函数和next-函数"><a href="#iter-函数和next-函数" class="headerlink" title="iter()函数和next()函数"></a>iter()函数和next()函数</h2><p>list、tuple等都是可迭代对象，我们可以通过iter()函数获取这些可迭代对象的迭代器。然后我们可以对获取到的迭代器不断使用next()函数来获取下一条数据。iter()函数实际上就是调用了可迭代对象的<strong>iter</strong>方法。代码示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">it = iter(li)</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><h2 id="如何判断一个对象是否是迭代器"><a href="#如何判断一个对象是否是迭代器" class="headerlink" title="如何判断一个对象是否是迭代器"></a>如何判断一个对象是否是迭代器</h2><p>可以使用instance函数判断<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line">print(<span class="string">"list is Iterator?"</span>,isinstance([],Iterator))</span><br><span class="line">print(<span class="string">"iter(list) is Iterator?"</span>,isinstance(iter([]),Iterator))</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list is Iterator? False</span><br><span class="line">iter(list) is Iterator? True</span><br></pre></td></tr></table></figure></p><h2 id="迭代器Iterator"><a href="#迭代器Iterator" class="headerlink" title="迭代器Iterator"></a>迭代器Iterator</h2><p>通过上面的分析，我们已经知道，迭代器是用来帮助我们记录每次迭代访问到的位置，当我们对迭代器使用next()函数的时候，迭代器会向我们返回它所记录位置的下一个位置的数据。实际上，在使用next()函数的时候，调用的就是迭代器对象的<strong>next</strong>方法（Python3中是对象的<strong>next</strong>方法，Python2中是对象的next()方法）。所以，我们要想构造一个迭代器，就要实现它的<strong>next</strong>方法。但这还不够，python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现<strong>iter</strong>方法，而<strong>iter</strong>方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的<strong>iter</strong>方法返回自身即可。</p><p>一个实现了<strong>iter</strong>方法和<strong>next</strong>方法的对象，就是迭代器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.inner_list = list()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self,val)</span>:</span></span><br><span class="line">        self.inner_list.append(val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> MyIterator(self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,my_list)</span>:</span></span><br><span class="line">        self.current_idx = <span class="number">0</span>;</span><br><span class="line">        self.inner_list = my_list.inner_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current_idx &lt; len(self.inner_list):</span><br><span class="line">            tmp_val = self.inner_list[self.current_idx]</span><br><span class="line">            self.current_idx +=<span class="number">1</span> </span><br><span class="line">            <span class="keyword">return</span> tmp_val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    ml = MyList()</span><br><span class="line">    ml.add(<span class="number">1</span>)</span><br><span class="line">    ml.add(<span class="number">2</span>)</span><br><span class="line">    ml.add(<span class="number">3</span>)</span><br><span class="line">    ml.add(<span class="number">4</span>)</span><br><span class="line">    ml.add(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ml: </span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><h2 id="for-…-in-…的本质"><a href="#for-…-in-…的本质" class="headerlink" title="for … in …的本质"></a>for … in …的本质</h2><p>通过上面的代码例子，我们不妨来分析下for循环的本质。首先通过对象内部<strong>iter</strong>方法返回迭代器对象，然后不断地调用迭代器对象内部的<strong>next</strong>方法，返回内部元素。知道遇到StopIteration异常结束。</p><h2 id="迭代器妙用"><a href="#迭代器妙用" class="headerlink" title="迭代器妙用"></a>迭代器妙用</h2><p>我们发现迭代器最核心的功能就是可以通过next()函数的调用来返回下一个数据值。如果每次返回的数据值不是在一个已有的数据集合中读取的，而是通过程序按照一定的规律计算生成的，那么也就意味着可以不用再依赖一个已有的数据集合，也就是说不用再将所有要迭代的数据都一次性缓存下来供后续依次读取，这样可以节省大量的存储（内存）空间。</p><p>举个例子，比如，数学中有个著名的斐波拉契数列（Fibonacci），数列中第一个数为0，第二个数为1，其后的每一个数都可由前两个数相加得到：</p><p>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, …</p><p>现在我们想要通过for…in…循环来遍历迭代斐波那契数列中的前n个数。那么这个斐波那契数列我们就可以用迭代器来实现，每次迭代都通过数学计算来生成下一个数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        self.n = n </span><br><span class="line">        self.a = <span class="number">0</span> </span><br><span class="line">        self.b = <span class="number">1</span> </span><br><span class="line">        self.current_idx = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current_idx &lt; self.n:</span><br><span class="line">            tmp_val = self.a</span><br><span class="line">            self.a,self.b = (self.b,self.a + self.b)</span><br><span class="line">            self.current_idx +=<span class="number">1</span> </span><br><span class="line">            <span class="keyword">return</span> tmp_val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    f = Fib(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">13</span><br><span class="line">21</span><br><span class="line">34</span><br></pre></td></tr></table></figure></p><h1 id="并不是只有for循环能接收可迭代对象"><a href="#并不是只有for循环能接收可迭代对象" class="headerlink" title="并不是只有for循环能接收可迭代对象"></a>并不是只有for循环能接收可迭代对象</h1><p>除了for循环能接收可迭代对象，list、tuple等也能接收。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">li = list(Fib(<span class="number">10</span>))</span><br><span class="line">print(li)</span><br><span class="line">tu = tuple(Fib(<span class="number">10</span>))</span><br><span class="line">print(tu)</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span><br><span class="line">(0, 1, 1, 2, 3, 5, 8, 13, 21, 34)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h1&gt;&lt;p&gt;迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>心情随笔</title>
    <link href="http://yoursite.com/2018/11/29/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2018/11/29/心情随笔/</id>
    <published>2018-11-29T12:01:09.000Z</published>
    <updated>2018-11-29T15:02:28.607Z</updated>
    
    <content type="html"><![CDATA[<ul><li>最近遭受的事情真是有点多，每天上班下班的生活，一天天的，在公司也没什么开发需求，代码写不了多少。感觉技术提升很缓慢，这也正是我晚上回来想学学习点新知识的原因之一吧！距离自己还没毕业的实习，到现在正式工作，入了自己很喜欢的行业，也已经快有一年时间了。曾经自己刚出来找工作的时候，怕公司不要我，对于工资这一块完全没有任何想法，能让我进公司干就行了，自己喜欢的事情，真不在乎工资。我在大学的时候想过，以后自己会做什么？看到自己高中同学朋友毕业的早一点的，已经工作了。而自己以后到底能干嘛？从那时候起，我才正视我所喜欢的东西，我喜欢计算机，以后可以做程序员。之后，我甚至有这样的感觉：以后自己不做程序员的话，真想不到我还能做其他的工作了。还好，得益于此，现在的我一点都不后悔当初的选择，并且未来还有很多值得我努力奋斗的。现在想想那时候的自己，也并不会有觉得任何天真之类的感觉。毕竟自己的路都是一步步过来的，我总会慢慢成长有所蜕变的。之前跳了一次槽，现在这份工作也已经干了快四个月了吧，做的是银行的卡前置系统。纯c代码编写，代码量还挺多的，不过我运气还不错，遇到了个大牛师傅，在他的带领下，我慢慢地了解了整个系统的模块架构，可以进行交易的开发，也可以配合测试人员或者其他系统的人快速定位问题，帮助他们解决遇到的问题。进来，感觉到自己对系统的细节还不熟悉，在公司花时间把整个系统代码模块从前往后一点点的看，争取能把百分之八十的细节都看懂，看着别人写的代码，自己也可以学到很多。晚上回来学学自己挺喜欢的语言python，对于python，我的感觉是很是实用，开发快，做点小东西很好。前段时间就自己动手写了个京东抢券的爬虫，和一个爬取企查查企业信息的爬虫，如果用c来写，且不说我能不能做得出来，我得花很多时间来学习底层的一些机制，再自己写出来，很麻烦。比如https请求涉及到的证书，加密这一类东西，估计自己花上一个月的晚上时间都不一定搞得出来吧。不过c语言来做能更加清楚了解底层的知识，理解更加透彻。语言这东西并不能说谁好谁坏，只是在适当的时候选择合适的语言来进行开发，会事半功倍。</li><li>自己每天晚上回来，基本上都会学一学python，只是今天回头想想，好多知识点我又忘记了，真是有点可惜。我写博客记录下自己所学的基础知识，是怕自己会忘记，不记下来就什么都没有了，记录下来，以后用到的时候可以看看自己写的博客，看自己写的东西，肯定比别人的要理解得快，毕竟都是自己曾经的思路。现在的我博客上并没有任何自己在某一方面有自己的领悟的知识点，比如linux内核，网络的深奥知识，现在的我要写这些东西还远远不够，以后有自己有所领悟的领域，我应该也会写下来吧，能帮助自己梳理知识，也希望自己的见解可以帮助到其他的人，这还是挺好的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;最近遭受的事情真是有点多，每天上班下班的生活，一天天的，在公司也没什么开发需求，代码写不了多少。感觉技术提升很缓慢，这也正是我晚上回来想学学习点新知识的原因之一吧！距离自己还没毕业的实习，到现在正式工作，入了自己很喜欢的行业，也已经快有一年时间了。曾经自己刚出来
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python之装饰器(进阶版)</title>
    <link href="http://yoursite.com/2018/11/25/python%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8-%E8%BF%9B%E9%98%B6%E7%89%88/"/>
    <id>http://yoursite.com/2018/11/25/python之装饰器-进阶版/</id>
    <published>2018-11-25T14:12:58.000Z</published>
    <updated>2018-11-25T17:13:17.202Z</updated>
    
    <content type="html"><![CDATA[<p><strong>有了上一篇装饰器原理的简单介绍，那么可以来探索下装饰器的一些高级用法</strong></p><h1 id="装饰器之装饰有参数的函数"><a href="#装饰器之装饰有参数的函数" class="headerlink" title="装饰器之装饰有参数的函数"></a>装饰器之装饰有参数的函数</h1><h2 id="简单版本的装饰有参数函数"><a href="#简单版本的装饰有参数函数" class="headerlink" title="简单版本的装饰有参数函数"></a>简单版本的装饰有参数函数</h2><p>上一篇中提到的语法糖装饰器语法是 @函数名 这种格式，相当与 被装饰的函数名 = 函数名(被装饰的函数名) 这样的情况，代码例子如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">func()</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"test"</span>)</span><br></pre></td></tr></table></figure></p><p>上面@decorator 也就相当于 test = decorator(test),那么，如果test函数带有参数的情况下，改怎么装饰呢？<br>如果我们不对原有装饰器进行改变，还是用原来的来装饰一个有参数的函数的话，python解释器会提示缺少参数错误。如下代码的例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">"test"</span>,arg)</span><br><span class="line"></span><br><span class="line">test(<span class="string">"helloworld"</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;demo6.py&quot;, line 10, in &lt;module&gt;</span><br><span class="line">    test(&quot;helloworld&quot;)</span><br><span class="line">TypeError: wrapper() takes 0 positional arguments but 1 was given</span><br></pre></td></tr></table></figure></p><p>提示我们wrapper函数调用缺少参数，那么我们不妨从 test = decorator(test) 这行代码的内部运行流程来理解下为啥会出现这样的错误，当 decorator(test) 调用时，返回内部定义的wrapper函数变量，而test是带有参数的，用来引用一个没有参数的wrapper，就报错了。明白了这一点，那么接下来我们就好办，修改代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(arg)</span>:</span></span><br><span class="line">        func(arg)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">"test"</span>,arg)</span><br><span class="line"></span><br><span class="line">test(<span class="string">"helloworld"</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test helloworld</span><br></pre></td></tr></table></figure></p><p>没有任何的问题，好了，这只是一种简单版本的带参数函数装饰器，接下来再看看通用版本的。</p><h2 id="通用版本的装饰有参数函数装饰器"><a href="#通用版本的装饰有参数函数装饰器" class="headerlink" title="通用版本的装饰有参数函数装饰器"></a>通用版本的装饰有参数函数装饰器</h2><p>考虑到一个装饰器的通用性，实际开发过程中可能不仅要装饰一个参数的函数，也可能装饰带有多个参数的函数，就比如要在原有的函数之上添加日志记录功能，原有函数有很多，参数也不尽相同，那么就要写一个通用版本的装饰器。相信大家都学过python的可变长参数这个知识点，函数参数列表中参数名前面加上*，代表传递多个除字典以外普通类型的参数，写上**的话，代表传递多个字典参数，有了这个知识点的基础，那么实现一个通用版本装饰器就很简单，修改上面代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        func(*args,*kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">"test"</span>,arg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(arg1,arg2,arg3)</span>:</span></span><br><span class="line">    print(<span class="string">"test"</span>,arg1,arg2,arg3)</span><br><span class="line"></span><br><span class="line">test1(<span class="string">"helloworld"</span>)</span><br><span class="line"></span><br><span class="line">test2(<span class="string">"hello"</span>,<span class="string">"world"</span>,<span class="string">"python"</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test helloworld</span><br><span class="line">test hello world python</span><br></pre></td></tr></table></figure></p><p>好了，上面这个装饰器则能满足装饰任何参数个数的函数</p><h1 id="装饰带有返回值的函数"><a href="#装饰带有返回值的函数" class="headerlink" title="装饰带有返回值的函数"></a>装饰带有返回值的函数</h1><p>平时开发过程中，有返回值的函数非常之多，有时候我们要依靠返回值来判断函数执行是否达到了我们的预期效果，那么如何来装饰一个有返回值的函数呢?<br>就比如下面这段代码，我们来装饰一个有返回值的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeBold</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_str</span><span class="params">(info)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line">print(get_str(<span class="string">"hello world"</span>))</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure></p><p>咦？我们的get_str函数明明有返回值，装饰过后为啥没了呢？原因很简单，因为在内部wrapper函数中，并没有任何的返回值，它仅仅只是调用了一下get_str函数。那么我们不妨对调用函数的结果进行返回，看看情况会怎么样?<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeBold</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;b&gt;"</span> + func(*args,**kwargs) + <span class="string">"&lt;/b&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_str</span><span class="params">(info)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line">print(get_str(<span class="string">"hello world"</span>))</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;hello world&lt;/b&gt;</span><br></pre></td></tr></table></figure></p><p>结果在我们的期望之中，那么装饰带有返回值的函数，可以这么来做。</p><h1 id="多个装饰器装饰一个函数"><a href="#多个装饰器装饰一个函数" class="headerlink" title="多个装饰器装饰一个函数"></a>多个装饰器装饰一个函数</h1><p>这个知识点的话先讲原理不太好，我们先从代码的运行结果来看，再进行分析多个装饰器装饰一个函数是怎么样的一个过程<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_verity1</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">"装饰验证1功能"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"---验证1功能执行---"</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_verity2</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">"装饰验证2功能"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"---验证2功能执行---"</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_verity1</span></span><br><span class="line"><span class="meta">@add_verity2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"---test---"</span>)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">装饰验证2功能</span><br><span class="line">装饰验证1功能</span><br><span class="line">---验证1功能执行---</span><br><span class="line">---验证2功能执行---</span><br><span class="line">---test---</span><br></pre></td></tr></table></figure></p><p>从运行结果来看，显示装饰了下面verity2的功能，再装饰verity1，函数调用时候是先运行验证1，再运行验证2，最后调用之前函数本身。其实这也不难理解，先装饰verity2，也就是test = add_verity2(test)，此时的test已经变成了引用add_verity2内部的wrapper函数，那么自然也就带上了验证2的功能，然后再装饰verity1，test = add_verity1(test)，此时带上了验证2功能的test再来引用add_verity1内部的wrapper函数。</p><h1 id="装饰器带参数"><a href="#装饰器带参数" class="headerlink" title="装饰器带参数"></a>装饰器带参数</h1><p>如果一个装饰器要可以根据程序员传递的参数来进行装饰不同的功能，可以对装饰器也增加参数，这一点稍微有点复杂，且看代码再来理解<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_verity</span><span class="params">(verity_type)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> verity_type == <span class="string">"验证1"</span>:</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">outer_wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">inner_wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">                print(<span class="string">"---验证1功能执行---"</span>)</span><br><span class="line">                <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> inner_wrapper</span><br><span class="line">        <span class="keyword">return</span> outer_wrapper</span><br><span class="line">    <span class="keyword">elif</span> verity_type == <span class="string">"验证2"</span>:</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">outer_wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">inner_wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">                print(<span class="string">"---验证2功能执行---"</span>)</span><br><span class="line">                <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> inner_wrapper</span><br><span class="line">        <span class="keyword">return</span> outer_wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_verity(verity_type="验证1")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"---test1---"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@add_verity(verity_type="验证2")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"---test2---"</span>)</span><br><span class="line"></span><br><span class="line">test1()</span><br><span class="line">test2()</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---验证1功能执行---</span><br><span class="line">---test1---</span><br><span class="line">---验证2功能执行---</span><br><span class="line">---test2---</span><br></pre></td></tr></table></figure></p><p>这样子我们就可以对装饰器传递参数来选择装饰功能，那么上面这一装饰器装饰过程又是怎么样的呢?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.@add_verity(verity_type=&quot;验证1&quot;)，这行代码，首先是对add_verity(verity_type=&quot;验证1&quot;)的调用</span><br><span class="line">2.调用完毕，内部根据传递的参数，运行不同的if分之，假如参数是&quot;验证1&quot;，也就会把验证1分之内部的outer_wrapper引用返回回去，此时也就相当于 @验证1分之下的outer_wrapper</span><br><span class="line">3.这样子接下来的就好理解了，test1 = outer_wrapper(test1)，也就是test1引用了验证1分之内部的inner_wrapper函数</span><br><span class="line">test2装饰的原理同上</span><br></pre></td></tr></table></figure></p><p><strong>呼~终于熬夜把装饰器的知识点写完了</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;有了上一篇装饰器原理的简单介绍，那么可以来探索下装饰器的一些高级用法&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;装饰器之装饰有参数的函数&quot;&gt;&lt;a href=&quot;#装饰器之装饰有参数的函数&quot; class=&quot;headerlink&quot; title=&quot;装饰器之装饰有参数
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之装饰器</title>
    <link href="http://yoursite.com/2018/11/25/Python%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://yoursite.com/2018/11/25/Python之装饰器/</id>
    <published>2018-11-25T04:05:14.000Z</published>
    <updated>2018-11-25T05:13:59.161Z</updated>
    
    <content type="html"><![CDATA[<p>装饰器是python里面比较重要的内容之一，就我个人学习装饰器的历程而言，真是装饰器虐我千百遍，我待装饰器如初恋。。。这东西来来回回学了好多遍，当时是搞明白了，可是工作不会用到，过段时间，回过头来想想装饰器是啥？它的原理是什么？我就又不记得了，所以还是记下来比较好吧！</p><h1 id="装饰器介绍"><a href="#装饰器介绍" class="headerlink" title="装饰器介绍"></a>装饰器介绍</h1><p>装饰器是一种用来装饰函数的函数，它有两个原则:1.在不改变原函数的代码的情况下装饰函数 2.在不改变原函数调用方式的情况下装饰函数</p><h1 id="函数及变量"><a href="#函数及变量" class="headerlink" title="函数及变量"></a>函数及变量</h1><p>在python中，函数名也是一个变量，可以有赋值等操作。其实在c语言中，函数名的本质也就是一个指向此函数名对应的函数的代码段，有c语言基础可能理解这一点会比较容易<br>代码示例如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"this is a func"</span>)</span><br><span class="line"></span><br><span class="line">a = func</span><br><span class="line">a()</span><br></pre></td></tr></table></figure></p><p>这段代码运行结果就是”this is a func”，给a赋值func后，a也就是这个函数类型，当然赋值时候不可以在后面加括号，加了括号就是调用函数了，会把func的返回值赋值给a，没有的话a就等于None，在c语言中这么做的话要用函数指针，这一点来说python方便太多了</p><h1 id="函数内定义函数"><a href="#函数内定义函数" class="headerlink" title="函数内定义函数"></a>函数内定义函数</h1><p>有了上面的基础，那么再来看看在函数体内定义函数的情况是咋样的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"before inner_func"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"i am inner_func"</span>)</span><br><span class="line">    print(<span class="string">"after inner_func"</span>)</span><br><span class="line"></span><br><span class="line">outer_func()</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before inner_func</span><br><span class="line">after inner_func</span><br></pre></td></tr></table></figure></p><p>从运行结果来看，里边定义的函数并没有被调用，也仅仅只是定义的情况，当然我们可以在内部进行调用，对上面代码稍作修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"before inner_func"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"i am inner_func"</span>)</span><br><span class="line">    print(<span class="string">"after inner_func"</span>)</span><br><span class="line">inner_func()</span><br><span class="line"></span><br><span class="line">outer_func()</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before inner_func</span><br><span class="line">after inner_func</span><br><span class="line">i am inner_func</span><br></pre></td></tr></table></figure></p><p>说明在内部调用了inner_func函数</p><h1 id="装饰器雏形"><a href="#装饰器雏形" class="headerlink" title="装饰器雏形"></a>装饰器雏形</h1><p>有了上面两个小知识点的基础，那么就可以来讲一下装饰器了，先自己写一个装饰器原理分解代码,用来统计函数运行时间的装饰函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(func)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(<span class="string">"run time is %s"</span>%(end_time-start_time))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"this is test1"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">"this is test2"</span>)</span><br><span class="line"></span><br><span class="line">test1 = timer(test1)</span><br><span class="line">test2 = timer(test2)</span><br><span class="line"></span><br><span class="line">test1()</span><br><span class="line">test2()</span><br></pre></td></tr></table></figure></p><p>运行结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;function test1 at 0x7f208c7ad510&gt;</span><br><span class="line">&lt;function test2 at 0x7f208c7ada60&gt;</span><br><span class="line">this is test1</span><br><span class="line">run time is 2.002680540084839</span><br><span class="line">this is test2</span><br><span class="line">run time is 4.004958152770996</span><br></pre></td></tr></table></figure></p><p>解释:<br>上面的代码，前部分都是函数定义部分，没有调用，真正看到程序运行流程的是从test1 = timer(test1),这里开始往后，那么我就从这行代码开始分析。<br>这行代码就是把test1当做参数传给timer函数调用timer，然后把返回结果赋值给test1。<br>那么调用timer的流程就是先打印传递进去的参数，也就是test1，然后定义了一个内部的wrapper函数，wrapper在内部只是定义，并不会被调用。接下来返回wrapper，此时test1就变成了wrapper，test2过程也和上面一样。<br>接下来调用test1，就变成了调用内部的wrapper，那么结果不就显而易见了。</p><h1 id="装饰器之语法糖"><a href="#装饰器之语法糖" class="headerlink" title="装饰器之语法糖"></a>装饰器之语法糖</h1><p>上面就是装饰器的原理分解，当然python语言提供了一个简便的方法，让我们来实现装饰器，也就是装饰器语法糖，在定义函数之前 @函数名 ,就可以使用装饰器了，把上面代码稍作修改:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(func)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(<span class="string">"run time is %s"</span>%(end_time-start_time))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"this is test1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">"this is test2"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test1()</span><br><span class="line">test2()</span><br></pre></td></tr></table></figure></p><p>运行一下，发现逻辑和上面完全一致(统计时间会有所变化)。也就是这种语法糖的效果就相当于我们写的test1 = timer(test1)</p><p><strong>好了，装饰器的介绍先告一段落，之后再讲它的一些进阶用法。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;装饰器是python里面比较重要的内容之一，就我个人学习装饰器的历程而言，真是装饰器虐我千百遍，我待装饰器如初恋。。。这东西来来回回学了好多遍，当时是搞明白了，可是工作不会用到，过段时间，回过头来想想装饰器是啥？它的原理是什么？我就又不记得了，所以还是记下来比较好吧！&lt;/p
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础知识</title>
    <link href="http://yoursite.com/2018/11/21/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/11/21/CSS基础知识/</id>
    <published>2018-11-21T15:10:13.000Z</published>
    <updated>2018-11-26T15:31:38.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css基本语法及页面引用"><a href="#css基本语法及页面引用" class="headerlink" title="css基本语法及页面引用"></a>css基本语法及页面引用</h1><h2 id="css基本语法"><a href="#css基本语法" class="headerlink" title="css基本语法"></a>css基本语法</h2><p>css的定义方法是：</p><p>选择器 { 属性:值; 属性:值; 属性:值;}</p><p>选择器是将样式和页面元素关联起来的名称，属性是希望设置的样式属性每个属性有一个或多个值。代码示例：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    css注释 ctrl+shift+"/"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123; </span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>; </span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>; </span><br><span class="line">    <span class="attribute">color</span>:red </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="css页面引入方法："><a href="#css页面引入方法：" class="headerlink" title="css页面引入方法："></a>css页面引入方法：</h2><p>1、外联式：通过link标签，链接到外部样式表到页面中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、嵌入式：通过style标签，在网页上创建嵌入的样式表。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>&#123; <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>; <span class="attribute">color</span>:red &#125;</span></span><br><span class="line"><span class="undefined">    ......</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3、内联式：通过标签的style属性，在标签上直接写样式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100px; height:100px; color:red "</span>&gt;</span>......<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="css文本设置"><a href="#css文本设置" class="headerlink" title="css文本设置"></a>css文本设置</h1><p>常用的应用文本的css样式：</p><ul><li>color 设置文字的颜色，如： color:red;</li><li>font-size 设置文字的大小，如：font-size:12px;</li><li>font-family 设置文字的字体，如：font-family:’微软雅黑’;</li><li>font-style 设置字体是否倾斜，如：font-style:’normal’; 设置不倾斜，font-style:’italic’;设置文字倾斜</li><li>font-weight 设置文字是否加粗，如：font-weight:bold; 设置加粗 font-weight:normal 设置不加粗</li><li>line-height 设置文字的行高，设置行高相当于在每行文字的上下同时加间距， 如：line-height:24px;</li><li>font 同时设置文字的几个属性，写的顺序有兼容问题，建议按照如下顺序写： font：是否加粗 字号/行高 字体；如： font:normal 12px/36px ‘微软雅黑’;</li><li>text-decoration 设置文字的下划线，如：text-decoration:none; 将文字下划线去掉</li><li>text-indent 设置文字首行缩进，如：text-indent:24px; 设置文字首行缩进24px 行高示例图片</li><li>text-align 设置文字水平对齐方式，如text-align:center 设置文字水平居中</li></ul><h1 id="css颜色表示法"><a href="#css颜色表示法" class="headerlink" title="css颜色表示法"></a>css颜色表示法</h1><p>css颜色值主要有三种表示方法：<br>1、颜色名表示，比如：red 红色，gold 金色<br>2、rgb表示，比如：rgb(255,0,0)表示红色<br>3、16进制数值表示，比如：#ff0000 表示红色，这种可以简写成 #f00</p><h1 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h1><p>常用的选择器有如下几种：<br><strong>1、标签选择器</strong><br>标签选择器，此种选择器影响范围大，建议尽量应用在层级选择器中。<br>举例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:red&#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div&gt;....&lt;/div&gt;   &lt;!-- 对应以上两条样式 --&gt;</span><br><span class="line">&lt;div class="box"&gt;....&lt;/div&gt;   &lt;!-- 对应以上两条样式 --&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、id选择器</strong><br>通过id名来选择元素，元素的id名称不能重复，所以一个样式设置项只能对应于页面上一个元素，不能复用，id名一般给程序使用，所以不推荐使用id作为选择器。<br>举例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;<span class="attribute">color</span>:red&#125; </span><br><span class="line"></span><br><span class="line">&lt;div id="box"&gt;....&lt;/div&gt;   &lt;!-- 对应以上一条样式，其它元素不允许应用此样式 --&gt;</span><br></pre></td></tr></table></figure></p><p><strong>3、类选择器</strong><br>通过类名来选择元素，一个类可应用于多个元素，一个元素上也可以使用多个类，应用灵活，可复用，是css中应用最多的一种选择器。<br>举例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"><span class="selector-class">.big</span>&#123;<span class="attribute">font-size</span>:<span class="number">20px</span>&#125;</span><br><span class="line"><span class="selector-class">.mt10</span>&#123;<span class="attribute">margin-top</span>:<span class="number">10px</span>&#125; </span><br><span class="line"></span><br><span class="line">&lt;div class="red"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;h1 class="red big mt10"&gt;....&lt;/h1&gt;</span><br><span class="line">&lt;p class="red mt10"&gt;....&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p><strong>4、层级选择器</strong><br>主要应用在选择父元素下的子元素，或者子元素下面的子元素，可与标签元素结合使用，减少命名，同时也可以通过层级，防止命名冲突。<br>举例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.red</span>&#123;<span class="attribute">color</span>:pink&#125;</span><br><span class="line"><span class="selector-class">.red</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;span&gt;....&lt;/span&gt;</span><br><span class="line">    &lt;a href="#" class="red"&gt;....&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3 class="red"&gt;....&lt;/h3&gt;</span><br></pre></td></tr></table></figure></p><p><strong>5、组选择器</strong><br>多个选择器，如果有同样的样式设置，可以使用组选择器。<br>举例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>,<span class="selector-class">.box2</span>,<span class="selector-class">.box3</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">100px</span>&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;<span class="attribute">background</span>:red&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;<span class="attribute">background</span>:pink&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;<span class="attribute">background</span>:gold&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box1"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box2"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box3"&gt;....&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>6、伪类及伪元素选择器</strong><br>常用的伪类选择器有hover，表示鼠标悬浮在元素上时的状态，伪元素选择器有before和after,它们可以通过样式在元素中插入内容。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"><span class="selector-class">.box2</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">content</span>:<span class="string">'行首文字'</span>;&#125;</span><br><span class="line"><span class="selector-class">.box3</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">content</span>:<span class="string">'行尾文字'</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class="box1"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box2"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box3"&gt;....&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h1 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h1><h2 id="盒子模型解释"><a href="#盒子模型解释" class="headerlink" title="盒子模型解释"></a>盒子模型解释</h2><p>元素在页面中显示成一个方块，类似一个盒子，CSS盒子模型就是使用现实中盒子来做比喻，帮助我们设置元素对应的样式。把元素叫做盒子，设置对应的样式分别为：盒子的宽度(width)、盒子的高度(height)、盒子的边框(border)、盒子内的内容和边框之间的间距(padding)、盒子与盒子之间的间距(margin)。</p><h2 id="设置宽高"><a href="#设置宽高" class="headerlink" title="设置宽高"></a>设置宽高</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;  <span class="comment">/* 设置盒子的宽度，此宽度是指盒子内容的宽度，不是盒子整体宽度(难点) */</span> </span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>; <span class="comment">/* 设置盒子的高度，此高度是指盒子内容的高度，不是盒子整体高度(难点) */</span></span><br></pre></td></tr></table></figure><h2 id="设置边框"><a href="#设置边框" class="headerlink" title="设置边框"></a>设置边框</h2><p>设置一边的边框，比如顶部边框，可以按如下设置：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top-color</span><span class="selector-pseudo">:red</span>;    <span class="comment">/* 设置顶部边框颜色为红色 */</span>  </span><br><span class="line"><span class="selector-tag">border-top-width</span><span class="selector-pseudo">:10px</span>;   <span class="comment">/* 设置顶部边框粗细为10px */</span>   </span><br><span class="line"><span class="selector-tag">border-top-style</span><span class="selector-pseudo">:solid</span>;  <span class="comment">/* 设置顶部边框的线性为实线，常用的有：solid(实线)  </span></span><br><span class="line"><span class="comment">  dashed(虚线)  dotted(点线); */</span></span><br></pre></td></tr></table></figure></p><p>上面三句可以简写成一句：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br></pre></td></tr></table></figure></p><p>设置其它三个边的方法和上面一样，把上面的’top’换成’left’就是设置左边，换成’right’就是设置右边，换成’bottom’就是设置底边。</p><p>四个边如果设置一样，可以将四个边的设置合并成一句：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br></pre></td></tr></table></figure></p><h2 id="设置内间距padding"><a href="#设置内间距padding" class="headerlink" title="设置内间距padding"></a>设置内间距padding</h2><p>设置盒子四边的内间距，可设置如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding-top</span>：20<span class="selector-tag">px</span>;     <span class="comment">/* 设置顶部内间距20px */</span> </span><br><span class="line"><span class="selector-tag">padding-left</span><span class="selector-pseudo">:30px</span>;     <span class="comment">/* 设置左边内间距30px */</span> </span><br><span class="line"><span class="selector-tag">padding-right</span><span class="selector-pseudo">:40px</span>;    <span class="comment">/* 设置右边内间距40px */</span> </span><br><span class="line"><span class="selector-tag">padding-bottom</span><span class="selector-pseudo">:50px</span>;   <span class="comment">/* 设置底部内间距50px */</span></span><br></pre></td></tr></table></figure></p><p>上面的设置可以简写如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> 50<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>; <span class="comment">/* 四个值按照顺时针方向，分别设置的是 上 右 下 左 四个方向的内边距值。 */</span></span><br></pre></td></tr></table></figure></p><p>padding后面还可以跟3个值，2个值和1个值，它们分别设置的项目如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> 50<span class="selector-tag">px</span>; <span class="comment">/* 设置顶部内边距为20px，左右内边距为40px，底部内边距为50px */</span> </span><br><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>; <span class="comment">/* 设置上下内边距为20px，左右内边距为40px*/</span> </span><br><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span>; <span class="comment">/* 设置四边内边距为20px */</span></span><br></pre></td></tr></table></figure></p><h2 id="设置外间距margin"><a href="#设置外间距margin" class="headerlink" title="设置外间距margin"></a>设置外间距margin</h2><p>外边距的设置方法和padding的设置方法相同，将上面设置项中的’padding’换成’margin’就是外边距设置方法。</p><h1 id="盒模型使用技巧及相关问题"><a href="#盒模型使用技巧及相关问题" class="headerlink" title="盒模型使用技巧及相关问题"></a>盒模型使用技巧及相关问题</h1><h2 id="margin相关技巧"><a href="#margin相关技巧" class="headerlink" title="margin相关技巧"></a>margin相关技巧</h2><p>1、设置元素水平居中： margin:x auto;<br>2、margin负值让元素位移及边框合并</p><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</p><p>1、使用这种特性<br>2、设置一边的外边距，一般设置margin-top<br>3、将元素浮动或者定位</p><h2 id="margin-top-塌陷"><a href="#margin-top-塌陷" class="headerlink" title="margin-top 塌陷"></a>margin-top 塌陷</h2><p>在两个盒子嵌套时候，内部的盒子设置的margin-top会加到外边的盒子上，导致内部的盒子margin-top设置失败，解决方法如下：</p><p>1、外部盒子设置一个边框<br>2、外部盒子设置 overflow:hidden<br>3、使用伪元素类：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="css元素溢出"><a href="#css元素溢出" class="headerlink" title="css元素溢出"></a>css元素溢出</h1><p>当子元素的尺寸超过父元素的尺寸时，需要设置父元素显示溢出的子元素的方式，设置的方法是通过overflow属性来设置。<br><strong>overflow的设置项：</strong><br>1、visible 默认值。内容不会被修剪，会呈现在元素框之外。<br>2、hidden 内容会被修剪，并且其余内容是不可见的，此属性还有清除浮动、清除margin-top塌陷的功能。<br>3、scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。<br>4、auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。<br>5、inherit 规定应该从父元素继承 overflow 属性的值。</p><h1 id="块元素、内联元素、内联块元素"><a href="#块元素、内联元素、内联块元素" class="headerlink" title="块元素、内联元素、内联块元素"></a>块元素、内联元素、内联块元素</h1><p>元素就是标签，布局中常用的有三种标签，块元素、内联元素、内联块元素，了解这三种元素的特性，才能熟练的进行页面布局。</p><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><p>块元素，也可以称为行元素，布局中常用的标签如：div、p、ul、li、h1~h6、dl、dt、dd等等都是块元素，它在布局中的行为：</p><ul><li>支持全部的样式</li><li>如果没有设置宽度，默认的宽度为父级宽度100%</li><li>盒子占据一行、即使设置了宽度<h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2>内联元素，也可以称为行内元素，布局中常用的标签如：a、span、em、b、strong、i等等都是内联元素，它们在布局中的行为：</li><li>支持部分样式（不支持宽、高、margin上下、padding上下）</li><li>宽高由内容决定</li><li>盒子并在一行</li><li>代码换行，盒子之间会产生间距</li><li>子元素是内联元素，父元素可以用text-align属性设置子元素水平对齐方式<br><strong>解决内联元素间隙的方法</strong><br>1、去掉内联元素之间的换行<br>2、将内联元素的父级设置font-size为0，内联元素自身再设置font-size<h2 id="内联块元素"><a href="#内联块元素" class="headerlink" title="内联块元素"></a>内联块元素</h2>内联块元素，也叫行内块元素，是新增的元素类型，现有元素没有归于此类别的，img和input元素的行为类似这种元素，但是也归类于内联元素，我们可以用display属性将块元素或者内联元素转化成这种元素。它们在布局中表现的行为：</li><li>支持全部样式</li><li>如果没有设置宽高，宽高由内容决定</li><li>盒子并在一行</li><li>代码换行，盒子会产生间距</li></ul><p>这三种元素，可以通过display属性来相互转化，不过实际开发中，块元素用得比较多，所以我们经常把内联元素转化为块元素，少量转化为内联块，而要使用内联元素时，直接使用内联元素，而不用块元素转化了。</p><h2 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h2><p>display属性是用来设置元素的类型及隐藏的，常用的属性有：<br>1、none 元素隐藏且不占位置<br>2、block 元素以块元素显示<br>3、inline 元素以内联元素显示<br>4、inline-block 元素以内联块元素显示</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;css基本语法及页面引用&quot;&gt;&lt;a href=&quot;#css基本语法及页面引用&quot; class=&quot;headerlink&quot; title=&quot;css基本语法及页面引用&quot;&gt;&lt;/a&gt;css基本语法及页面引用&lt;/h1&gt;&lt;h2 id=&quot;css基本语法&quot;&gt;&lt;a href=&quot;#css基本语
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>html基础知识</title>
    <link href="http://yoursite.com/2018/11/14/html%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/11/14/html基础知识/</id>
    <published>2018-11-14T14:13:07.000Z</published>
    <updated>2018-11-14T15:28:38.736Z</updated>
    
    <content type="html"><![CDATA[<p>因为我不是做前端开发的，源于对技术的热爱以及公司年会要求做一个抽奖器，我打算用前端做界面，Django做后端,所以想系统学习一下这方面知识。考虑到忘得很快，所以想记录下来，不怕大家笑话，留下来也是自己曾经走过的脚印。</p><h1 id="html概述和基本结构"><a href="#html概述和基本结构" class="headerlink" title="html概述和基本结构"></a>html概述和基本结构</h1><h2 id="html概述"><a href="#html概述" class="headerlink" title="html概述"></a>html概述</h2><p>HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm，一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。</p><h2 id="html基本结构"><a href="#html基本结构" class="headerlink" title="html基本结构"></a>html基本结构</h2><p>一个html的基本结构如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          网页显示内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>第一行是文档声明，第二行“&lt;html&gt;”标签和最后一行“&gt;/html&lt;”定义html文档的整体，“&lt;html&gt;”标签中的‘lang=“en”’定义网页的语言为英文，定义成中文是’lang=”zh-CN”‘,不定义也没什么影响，它一般作为分析统计用。 “&gt;head&lt;”标签和“&gt;body&lt;”标签是它的第一层子元素，“&gt;head&lt;”标签里面负责对网页进行一些设置以及定义标题，设置包括定义网页的编码格式，外链css样式文件和javascript文件等，设置的内容不会显示在网页上，标题的内容会显示在标题栏，“&gt;body&lt;”内编写网页上显示的内容。</p><h2 id="HTML文档类型"><a href="#HTML文档类型" class="headerlink" title="HTML文档类型"></a>HTML文档类型</h2><p>目前常用的两种文档类型是xhtml 1.0和html5<br><strong>xhtml 1.0</strong><br>xhtml 1.0 是html5之前的一个常用的版本，目前许多网站仍然使用此版本。<br>此版本文档用sublime text创建方法： html:xt + tab<br>文档示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> xhtml 1.0 文档类型 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>html5</strong><br>pc端可以使用xhtml 1.0，也可以使用html5，html5是向下兼容的<br>此版本文档用sublime text创建方法： html:5 + tab 或者 ! + tab<br>文档示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> html5文档类型 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="两种文档的区别"><a href="#两种文档的区别" class="headerlink" title="两种文档的区别"></a>两种文档的区别</h2><p>1、文档声明和编码声明<br>2、html5新增了标签元素以及元素属性</p><h2 id="html注释："><a href="#html注释：" class="headerlink" title="html注释："></a>html注释：</h2><p>html文档代码中可以插入注释，注释是对代码的说明和解释，注释的内容不会显示在页面上，html代码中插入注释的方法是：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一段注释  --&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="html标题标签"><a href="#html标题标签" class="headerlink" title="html标题标签"></a>html标题标签</h1><p>通过 &lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;、&lt;h6&gt;,标签可以在网页上定义6种级别的标题。6种级别的标题表示文档的6级目录层级关系，比如说： &lt;h1&gt;用作主标题，其后是 &lt;h2&gt;，再其次是 &lt;h3&gt;，以此类推。搜索引擎会使用标题将网页的结构和内容编制索引，所以网页上使用标题是很重要的。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="html段落标签、换行标签与字符实体"><a href="#html段落标签、换行标签与字符实体" class="headerlink" title="html段落标签、换行标签与字符实体"></a>html段落标签、换行标签与字符实体</h1><h2 id="html段落标签"><a href="#html段落标签" class="headerlink" title="html段落标签"></a>html段落标签</h2><p>&lt;p&gt;标签定义一个文本段落，一个段落含有默认的上下间距，段落之间会用这种默认间距隔开，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超</span><br><span class="line">    文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的</span><br><span class="line">    标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方</span><br><span class="line">    式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网</span><br><span class="line">    页可以从一个网页链接跳转到另外一个网页。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="html换行标签"><a href="#html换行标签" class="headerlink" title="html换行标签"></a>html换行标签</h2><p>代码中成段的文字，直接在代码中回车换行，在渲染成网页时候不认这种换行，如果真想换行，可以在代码的段落中插入&gt;br /&lt;来强制换行，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="html字符实体"><a href="#html字符实体" class="headerlink" title="html字符实体"></a>html字符实体</h2><p>代码中成段的文字，如果文字间想空多个空格，在代码中空多个空格，在渲染成网页时只会显示一个空格，如果想显示多个空格，可以使用空格的字符实体,代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  在段落前想缩进两个文字的空格，使用空格的字符实体：&amp;nbsp;   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&amp;nbsp;&amp;nbsp;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在网页上显示 “&gt;” 和 “&lt;” 会误认为是标签，想在网页上显示“&gt;”和“&lt;”可以使用它们的字符实体，比如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- “&lt;” 和 “&gt;” 的字符实体为 &amp;lt; 和 &amp;gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    3 &amp;lt; 5 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    10 &amp;gt; 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="html块标签、含样式的标签"><a href="#html块标签、含样式的标签" class="headerlink" title="html块标签、含样式的标签"></a>html块标签、含样式的标签</h1><h2 id="html块标签"><a href="#html块标签" class="headerlink" title="html块标签"></a>html块标签</h2><p>1、&lt;div&gt; 标签 块元素，表示一块内容，没有具体的语义。<br>2、&lt;span&gt; 标签 行内元素，表示一行中的一小段内容，没有具体的语义。</p><h2 id="含样式和语义的标签"><a href="#含样式和语义的标签" class="headerlink" title="含样式和语义的标签"></a>含样式和语义的标签</h2><p>1、&lt;em&gt; 标签 行内元素，表示语气中的强调词<br>2、&lt;i&gt; 标签 行内元素，表示专业词汇<br>3、&lt;b&gt; 标签 行内元素，表示文档中的关键字或者产品名<br>4、&lt;strong&gt; 标签 行内元素，表示非常重要的内容</p><h2 id="语义化的标签"><a href="#语义化的标签" class="headerlink" title="语义化的标签"></a>语义化的标签</h2><p>语义化的标签，就是在布局的时候多使用有语义的标签，搜索引擎在爬网的时候能认识这些标签，理解文档的结构，方便网站的收录。比如：h1标签是表示标题，p标签是表示段落，ul、li标签是表示列表，a标签表示链接，dl、dt、dd表示定义列表等，语义化的标签不多。</p><h1 id="html图像标签、绝对路径和相对路径"><a href="#html图像标签、绝对路径和相对路径" class="headerlink" title="html图像标签、绝对路径和相对路径"></a>html图像标签、绝对路径和相对路径</h1><h2 id="html图像标签"><a href="#html图像标签" class="headerlink" title="html图像标签"></a>html图像标签</h2><p>&lt;img&gt;标签可以在网页上插入一张图片，它是独立使用的标签，它的常用属性有：</p><ul><li>src属性 定义图片的引用地址</li><li>alt属性 定义图片加载失败时显示的文字，搜索引擎会使用这个文字收录图片、盲人读屏软件会读取这个文字让盲人识别图片，所以此属性非常重要。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic.jpg"</span> <span class="attr">alt</span>=<span class="string">"产品图片"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h2><p>像网页上插入图片这种外部文件，需要定义文件的引用地址，引用外部文件还包括引用外部样式表，javascript等等，引用地址分为绝对地址和相对地址。</p><ul><li>绝对地址：相对于磁盘的位置去定位文件的地址</li><li><p>相对地址：相对于引用文件本身去定位被引用的文件地址<br>绝对地址在整体文件迁移时会因为磁盘和顶层目录的改变而找不到文件，相对路径就没有这个问题。相对路径的定义技巧：</p></li><li><p>“ ./ ” 表示当前文件所在目录下，比如：“./pic.jpg” 表示当前目录下的pic.jpg的图片，这个使用时可以省略。</p></li><li><p>“ ../ ” 表示当前文件所在目录下的上一级目录，比如：“../images/pic.jpg” 表示当前目录下的上一级目录下的images文件夹中的pic.jpg的图片。</p></li></ul><h2 id="html链接标签"><a href="#html链接标签" class="headerlink" title="html链接标签"></a>html链接标签</h2><p>&lt;a&gt;标签可以在网页上定义一个链接地址，它的常用属性有：</p><ul><li>href属性 定义跳转的地址</li><li>title属性 定义鼠标悬停时弹出的提示文字框</li><li>target属性 定义链接窗口打开的位置</li><li>target=”_self” 缺省值，新页面替换原来的页面，在原来位置打开</li><li>target=”_blank” 新页面会在新开的一个浏览器窗口打开<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--  # 表示链接到页面顶部   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.itcast.cn/"</span> <span class="attr">title</span>=<span class="string">"跳转的传智播客网站"</span>&gt;</span>传智播客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"2.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>测试页面2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="html列表"><a href="#html列表" class="headerlink" title="html列表"></a>html列表</h1><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>在网页上定义一个有编号的内容列表可以用&lt;ol&gt;、&lt;li&gt;配合使用来实现，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>在网页上定义一个无编号的内容列表可以用&lt;ul&gt;、&lt;li&gt;配合使用来实现，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻标题一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻标题二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻标题三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在网页上生成的列表，每条项目上会有一个小图标，这个小图标在不同浏览器上显示效果不同，所以一般会用样式去掉默认的小图标，如果需要图标，可以用样式自定义图标，从而达到在不同浏览器上显示的效果相同,实际开发中一般用这种列表。</p><h2 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h2><p>定义列表通常用于术语的定义。&lt;dl&gt;标签表示列表的整体。&lt;dt&gt;标签定义术语的题目。&lt;dd&gt;标签是术语的解释。一个&lt;dl&gt;中可以有多个题目和解释，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>前端三大块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>html<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>负责页面的结构<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>css<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>负责页面的表现<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>负责页面的行为<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="html表单"><a href="#html表单" class="headerlink" title="html表单"></a>html表单</h1><p>表单用于搜集不同类型的用户输入，表单由不同类型的标签组成，相关标签及属性用法如下：</p><p>1、&lt;form&gt;标签 定义整体的表单区域</p><p>action属性 定义表单数据提交地址<br>method属性 定义表单提交的方式，一般有“get”方式和“post”方式<br>2、&lt;label&gt;标签 为表单元素定义文字标注</p><p>3、&lt;input&gt;标签 定义通用的表单元素</p><ul><li>type属性</li><li>type=”text” 定义单行文本输入框</li><li>type=”password” 定义密码输入框</li><li>type=”radio” 定义单选框</li><li>type=”checkbox” 定义复选框</li><li>type=”file” 定义上传文件</li><li>type=”submit” 定义提交按钮</li><li>type=”reset” 定义重置按钮</li><li>type=”button” 定义一个普通按钮</li><li>type=”image” 定义图片作为提交按钮，用src属性定义图片地址</li><li>type=”hidden” 定义一个隐藏的表单域，用来存储值</li><li>value属性 定义表单元素的值</li><li>name属性 定义表单元素的名称，此名称是提交数据时的键名<br>4、&lt;textarea&gt;标签 定义多行文本输入框</li></ul><p>5、&lt;select&gt;标签 定义下拉表单元素</p><p>6、&lt;option&gt;标签 与&lt;select&gt;标签配合，定义下拉表单元素中的选项</p><h2 id="注册表单实例："><a href="#注册表单实例：" class="headerlink" title="注册表单实例："></a>注册表单实例：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://www..."</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span> 男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span> 女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"sing"</span> /&gt;</span> 唱歌</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"run"</span> /&gt;</span> 跑步</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"swiming"</span> /&gt;</span> 游泳</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>照片：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"person_pic"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>个人描述：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"about"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>籍贯：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"site"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- input类型为submit定义提交按钮  </span></span><br><span class="line"><span class="comment">     还可以用图片控件代替submit按钮提交，一般会导致提交两次，不建议使用。如：</span></span><br><span class="line"><span class="comment">     &lt;input type="image" src="xxx.gif"&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="html表格"><a href="#html表格" class="headerlink" title="html表格"></a>html表格</h1><p>1、&lt;table&gt;标签：声明一个表格，它的常用属性如下：</p><ul><li>border属性 定义表格的边框，设置值是数值</li><li>cellpadding属性 定义单元格内容与边框的距离，设置值是数值</li><li>cellspacing属性 定义单元格与单元格之间的距离，设置值是数值</li><li>align属性 设置整体表格相对于浏览器窗口的水平对齐方式,设置值有：left | center | right<br>2、&lt;tr&gt;标签：定义表格中的一行</li></ul><p>3、&lt;td&gt;和&lt;th&gt;标签：定义一行中的一个单元格，td代表普通单元格，th表示表头单元格，它们的常用属性如下：</p><ul><li>align 设置单元格中内容的水平对齐方式,设置值有：left | center | right</li><li>valign 设置单元格中内容的垂直对齐方式 top | middle | bottom</li><li>colspan 设置单元格水平合并，设置值是数值</li><li>rowspan 设置单元格垂直合并，设置值是数值</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为我不是做前端开发的，源于对技术的热爱以及公司年会要求做一个抽奖器，我打算用前端做界面，Django做后端,所以想系统学习一下这方面知识。考虑到忘得很快，所以想记录下来，不怕大家笑话，留下来也是自己曾经走过的脚印。&lt;/p&gt;
&lt;h1 id=&quot;html概述和基本结构&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习之链接查询</title>
    <link href="http://yoursite.com/2018/11/12/MySQL%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2018/11/12/MySQL学习之链接查询/</id>
    <published>2018-11-12T13:36:48.000Z</published>
    <updated>2018-11-12T14:14:04.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="交叉链接"><a href="#交叉链接" class="headerlink" title="交叉链接"></a>交叉链接</h1><ul><li>交叉链接的结果可以称之为笛卡尔积,把左表中的数据每一行都与右表中所有行相结合,形成的新表的行数是 左表数据行数*右表数据行数,示例如下</li><li>左表</li></ul><table><thead><tr><th style="text-align:center">id</th><th style="text-align:left">姓名</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">小王</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">小李</td></tr></tbody></table><ul><li>右表</li></ul><table><thead><tr><th style="text-align:center">id</th><th style="text-align:left">班级</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">一班</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">二班</td></tr></tbody></table><ul><li>交叉链接查询结果</li></ul><table><thead><tr><th style="text-align:center">id</th><th style="text-align:left">姓名</th><th style="text-align:left">id</th><th style="text-align:left">班级</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">小王</td><td style="text-align:left">1</td><td style="text-align:left">一班</td></tr><tr><td style="text-align:center">1</td><td style="text-align:left">小王</td><td style="text-align:left">2</td><td style="text-align:left">二班</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">小李</td><td style="text-align:left">1</td><td style="text-align:left">一班</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">小李</td><td style="text-align:left">2</td><td style="text-align:left">二班</td></tr></tbody></table><ul><li>交叉链接SQL语句<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">cross</span> <span class="keyword">join</span> classes;</span><br></pre></td></tr></table></figure></li></ul><h1 id="内链接"><a href="#内链接" class="headerlink" title="内链接"></a>内链接</h1><ul><li>仅将两个表中满足连接条件的行组合起来作为结果集。在内连接中，只有在两个表中匹配的行才能在结果集中出现<br><strong>等值链接</strong></li><li>在连接条件中使用等于号(=)运算符比较被连接列的列值，其查询结果中列出被连接表中的所有列，包括其中的重复列<br><strong>不等值链接</strong></li><li>在连接条件使用除等于运算符以外的其它比较运算符比较被连接的列的列值。这些运算符包括&gt;、&gt;=、&lt;=、&lt;、!&gt;、!&lt;和&lt;&gt;<br><strong>自然链接</strong></li><li>在连接条件中使用等于(=)运算符比较被连接列的列值，但它使用选择列表指出查询结果集合中所包括的列，并删除连接表中的重复列<br><strong>SQL语句</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span>  左表 <span class="keyword">inner</span> <span class="keyword">join</span> 右表 <span class="keyword">on</span> 左表.xxx = 右表.xxx;</span><br></pre></td></tr></table></figure></li></ul><h1 id="外链接"><a href="#外链接" class="headerlink" title="外链接"></a>外链接</h1><ul><li>外联接可以是左向外联接、右向外联接或完整外部联接。在内连接的基础上，还包含表中所有不符合条件的数据行，并将相对应的表列填写NULL<br><strong>左外链接</strong></li><li>（左–对应右NULL）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 左表 <span class="keyword">left</span> <span class="keyword">join</span> 右表 <span class="keyword">on</span> 左表.xxx = 右表.xxx;</span><br></pre></td></tr></table></figure></li></ul><p><strong>右外链接</strong></p><ul><li>（右–对应左NULL）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 左表 <span class="keyword">right</span> <span class="keyword">join</span> 右表 <span class="keyword">on</span> 左表.xxx = 右表.xxx;</span><br></pre></td></tr></table></figure></li></ul><p><strong>全外链接</strong></p><ul><li>完整外部联接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 左表 <span class="keyword">full</span> <span class="keyword">join</span> 右表 <span class="keyword">on</span> 左表.xxx = 右表.xxx;</span><br></pre></td></tr></table></figure></li></ul><p>不过这条全外链接语句我用MySQL测试的时候报错了,还有待验证…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;交叉链接&quot;&gt;&lt;a href=&quot;#交叉链接&quot; class=&quot;headerlink&quot; title=&quot;交叉链接&quot;&gt;&lt;/a&gt;交叉链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;交叉链接的结果可以称之为笛卡尔积,把左表中的数据每一行都与右表中所有行相结合,形成的新表的行数是 左表数据行数*
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Unix编程之getopt getopt_long的使用</title>
    <link href="http://yoursite.com/2018/11/08/Unix%E7%BC%96%E7%A8%8B%E4%B9%8Bgetopt-getopt-long%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/11/08/Unix编程之getopt-getopt-long的使用/</id>
    <published>2018-11-08T15:16:47.000Z</published>
    <updated>2018-11-08T16:39:17.834Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看goaccess源码时候，没想到一开头就被getopt_long这个函数给卡住了。。。不禁感慨自己离大牛的差距真是太大了，没办法，慢慢学习积累，希望自己的坚持早晚能导致自己的质变吧。<br>百度的时候发现了还有getopt这个函数，算是简化版本吧，只支持单字符的命令解析，做linux大型软件开发通常都离不开用户命令参数，下面就来把自己今晚所学到的小小知识点记录下来，以后也能让自己的代码越写越棒!</p><h1 id="getopt"><a href="#getopt" class="headerlink" title="getopt"></a>getopt</h1><ul><li><p>以下是摘自manpage中对getopt函数相关参数以及相关变量的展示,接下来对每个参数以及变量进行说明一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> <span class="keyword">char</span> *optstring)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> *optarg;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> optind, opterr, optopt;</span><br></pre></td></tr></table></figure></li><li><p>argc、argv这两个参数是c语言程序运行的参数变量，通过main函数传递进来，argc代表参数个数，argv是字符串参数数组</p></li><li>optstring这个参数是getopt函数所依赖的参数解释字符串,规则是：字符串中的单独一个字符代表了命令行传递的一个参数,字符后面如果没有冒号,则代表此参数没有对应值,如果有一个或者两个冒号,代表了参数后面有值,一个冒号支持两种传递参数值的方法,值紧挨着参数或者与参数隔一个空格,如果有两个冒号,仅支持紧挨着的写法,比如 “ab:c::d”这个字符串：</li><li>a参数后面没有任何值</li><li>b参数后面有值，可以通过 -b100或者-b 100方式传递</li><li>c参数后面有值,只可以通过 -c100的方式传递</li><li>d参数后面没有任何值</li><li>optarg这是一个char型指针,指向当前参数的值</li><li>optind是下一个argv的索引</li><li>optopt 不知道什么作用….</li><li>opterr如果不希望getopt()打印出错信息，则只要将全域变量opterr设为0即可。</li><li>getopt返回值,如果有参数为当前参数字符,没有参数返回-1<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> opt;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *optstring = <span class="string">"ab:c::d"</span>;</span><br><span class="line">    <span class="keyword">while</span>((opt = getopt(argc,argv,optstring)) != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c:%s\t"</span>,opt,optarg);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"optind=%d\t"</span>,optind);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"next opt is %s\t"</span>,argv[optind]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"optopt:%d\n"</span>,optopt);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>编译之后运行效果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./app -a -b 200 -c100 -d</span><br><span class="line">a:(null)        optind=2        next opt is -b  optopt:0</span><br><span class="line">b:200   optind=4        next opt is -c100       optopt:0</span><br><span class="line">c:100   optind=5        next opt is -d  optopt:0</span><br><span class="line">d:(null)        optind=6        next opt is (null)      optopt:0</span><br></pre></td></tr></table></figure></p><p>以上就是getopt的大致用法</p><h1 id="getopt-long"><a href="#getopt-long" class="headerlink" title="getopt_long"></a>getopt_long</h1><p>getopt_long保留了getopt的用法，并且支持长参数,就是不是单个字符的选项参数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt_long</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> <span class="keyword">char</span> *optstring,</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> struct option *longopts, <span class="keyword">int</span> *longindex)</span></span>;</span><br></pre></td></tr></table></figure></p><ul><li>前三个参数和getopt基本上一致</li><li>longopts:长参数的结构体配置</li><li>longindex:如果longindex非空，它指向的变量将记录当前找到参数符合longopts里的第几个元素的描述，即是longopts的下标值</li><li>返回值:对于短选项，返回值同getopt函数；对于长选项，如果flag是NULL，返回val，否则返回0；对于错误情况返回值同getopt函数</li><li><p>struct option</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">option</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  *name;       <span class="comment">/* 参数名称 */</span></span><br><span class="line"><span class="keyword">int</span>          has_arg;    <span class="comment">/* 指明是否带有参数 */</span></span><br><span class="line"><span class="keyword">int</span>          *flag;      <span class="comment">/* flag=NULL时,返回value;不为空时,*flag=val,返回0 */</span></span><br><span class="line"><span class="keyword">int</span>          val;        <span class="comment">/* 用于指定函数找到选项的返回值或flag非空时指定*flag的值*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>has_arg取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">no_argument         表明长选项不带参数，如：--name, --help</span><br><span class="line">required_argument  表明长选项必须带参数，如：--prefix /root或 --prefix=/root</span><br><span class="line">optional_argument  表明长选项的参数是可选的，如：--help或 –prefix=/root，其它都是错误</span><br></pre></td></tr></table></figure></li><li><p>下面通过实例代码演示用法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> o,idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *short_opts = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">long_opts</span>[] = &#123;</span> </span><br><span class="line">        &#123;<span class="string">"help"</span>,no_argument,<span class="literal">NULL</span>,<span class="string">'h'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"ip"</span>,optional_argument,<span class="literal">NULL</span>,<span class="string">'i'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"port"</span>,required_argument,<span class="literal">NULL</span>,<span class="string">'p'</span>&#125;,</span><br><span class="line">        &#123;<span class="literal">NULL</span>,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">0</span>&#125;</span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="keyword">while</span>((o = getopt_long(argc,argv,short_opts,long_opts,&amp;idx)) != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c:%s\t"</span>,o,optarg);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"optind=%d\t"</span>,optind);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"next opt is %s\n"</span>,argv[optind]);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./app --help  --port=8800 --ip=127.0.0.1</span><br><span class="line"></span><br><span class="line">h:(null)        optind=2        next opt is --port=8800</span><br><span class="line">p:8800  optind=3        next opt is --ip=127.0.0.1</span><br><span class="line">i:127.0.0.1     optind=4        next opt is (null)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看goaccess源码时候，没想到一开头就被getopt_long这个函数给卡住了。。。不禁感慨自己离大牛的差距真是太大了，没办法，慢慢学习积累，希望自己的坚持早晚能导致自己的质变吧。&lt;br&gt;百度的时候发现了还有getopt这个函数，算是简化版本吧，只支持单字符的命令
      
    
    </summary>
    
    
      <category term="Linux系统编程" scheme="http://yoursite.com/tags/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL查询学习笔记</title>
    <link href="http://yoursite.com/2018/11/05/MySQL%E6%9F%A5%E8%AF%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/11/05/MySQL查询学习笔记/</id>
    <published>2018-11-05T13:18:22.000Z</published>
    <updated>2018-11-06T13:54:17.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据的准备"><a href="#数据的准备" class="headerlink" title="数据的准备"></a>数据的准备</h1><ul><li>创建一个数据库<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> data_test <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure></li></ul><p><strong>创建数据表</strong></p><ul><li><p>students表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> primary <span class="keyword">key</span> auto_increment <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">    age tinyint <span class="keyword">unsigned</span> <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">    height <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">    gender enum(<span class="string">'男'</span>,<span class="string">'女'</span>,<span class="string">'中性'</span>,<span class="string">'保密'</span>) <span class="keyword">default</span> <span class="string">'保密'</span>,</span><br><span class="line">    cls_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">    is_delete <span class="built_in">bit</span> <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>classes表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>准备数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 向students表中插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span></span><br><span class="line">(<span class="number">0</span>,<span class="string">'小明'</span>,<span class="number">18</span>,<span class="number">180.00</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'小月月'</span>,<span class="number">18</span>,<span class="number">180.00</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'彭于晏'</span>,<span class="number">29</span>,<span class="number">185.00</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'刘德华'</span>,<span class="number">59</span>,<span class="number">175.00</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'黄蓉'</span>,<span class="number">38</span>,<span class="number">160.00</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'凤姐'</span>,<span class="number">28</span>,<span class="number">150.00</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'王祖贤'</span>,<span class="number">18</span>,<span class="number">172.00</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'周杰伦'</span>,<span class="number">36</span>,<span class="literal">NULL</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'程坤'</span>,<span class="number">27</span>,<span class="number">181.00</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'刘亦菲'</span>,<span class="number">25</span>,<span class="number">166.00</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'金星'</span>,<span class="number">33</span>,<span class="number">162.00</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'静香'</span>,<span class="number">12</span>,<span class="number">180.00</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'郭靖'</span>,<span class="number">12</span>,<span class="number">170.00</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">0</span>,<span class="string">'周杰'</span>,<span class="number">34</span>,<span class="number">176.00</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向classes表中插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classes <span class="keyword">values</span> (<span class="number">0</span>, <span class="string">"python_01期"</span>), (<span class="number">0</span>, <span class="string">"python_02期"</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="查询语句的使用"><a href="#查询语句的使用" class="headerlink" title="查询语句的使用"></a>查询语句的使用</h1><p><strong>查询所有字段</strong></p><ul><li>select * from 表名;<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li></ul><p><strong>查询指定字段</strong></p><ul><li>select 列1,列2,… from 表名;<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li></ul><p><strong>使用as给字段起别名</strong></p><ul><li><p>select 字段 as 名字 … from 表名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">as</span> 姓名,age <span class="keyword">as</span> 年龄 <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li><li><p>select 表名.字段 … from 表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> students.name,students.age <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li><li><p>可以通过as给表起别名</p></li><li><p>select 别名.字段 … from 表名 as 别名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selecct s.name,s.age from students as s;</span><br></pre></td></tr></table></figure></li><li><p>消除重复行</p></li><li>distinct 字段<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> gender <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li></ul><p><strong>条件查询</strong></p><ul><li>比较运算符</li><li><p>select … from 表名 where …;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询大于18岁的信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> age&gt;<span class="number">18</span>;</span><br><span class="line"><span class="comment">--查询小于18岁的信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> age&lt;<span class="number">18</span>;</span><br><span class="line"><span class="comment">--查询小于或者等于18岁的信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> age&lt;=<span class="number">18</span>;</span><br><span class="line"><span class="comment">--查询年龄为18岁的所有学生的信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> age=<span class="number">18</span>;</span><br></pre></td></tr></table></figure></li><li><p>逻辑运算符</p></li><li><p>and</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--18到28之间的所有学生信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> age&gt;<span class="number">18</span> <span class="keyword">and</span> age&lt;<span class="number">28</span>;</span><br><span class="line"><span class="comment">--18岁以上的女性</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> age&gt;<span class="number">18</span> <span class="keyword">and</span> gender=<span class="string">"女"</span>;</span><br></pre></td></tr></table></figure></li><li><p>or</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--18岁以上或者身高超过180以上</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> age&gt;<span class="number">18</span> <span class="keyword">or</span> height&gt;<span class="number">180</span>;</span><br></pre></td></tr></table></figure></li><li><p>not</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--不在18岁以上的女性</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">not</span> (age&gt;<span class="number">18</span> <span class="keyword">and</span> gender=<span class="string">"女"</span>);</span><br><span class="line"><span class="comment">--年龄不是小于或者等于18 并且是女性</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> (<span class="keyword">not</span> age&lt;=<span class="number">18</span>) <span class="keyword">and</span> gender=<span class="string">"女"</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>模糊查询</strong></p><ul><li>like</li><li>%替换0个或者多个</li><li><p>_替换1个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询姓名中以 “小” 开始的名字</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"小%"</span>;</span><br><span class="line"><span class="comment">--查询姓名中有 “小” 所有名字</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%小%"</span>;</span><br><span class="line"><span class="comment">--查询有两个字的名字</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"__"</span>;</span><br><span class="line"><span class="comment">--查询有三个字的名字</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"___"</span>;</span><br><span class="line"><span class="comment">--查询至少有两个字的名字</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"__%"</span>;</span><br></pre></td></tr></table></figure></li><li><p>rlike 正则表达式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询以“周”开始的姓名</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">rlike</span> <span class="string">"^周.*"</span>;</span><br><span class="line"><span class="comment">--查询以“周”开始 “伦”结尾的姓名</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">rlike</span> <span class="string">"^周.*伦$"</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>范围查询</strong></p><ul><li><p>in (1,3,8)表示在一个非连续的范围内</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询年龄为18，34的姓名</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">18</span>,<span class="number">34</span>);</span><br></pre></td></tr></table></figure></li><li><p>not in 不在此非连续范围内</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询年龄不是18，34岁的名字</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">18</span>,<span class="number">34</span>);</span><br></pre></td></tr></table></figure></li><li><p>not between … and …表示不在一个连续的范围内</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询年龄不在18到34岁之间的信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">18</span> <span class="keyword">and</span> <span class="number">34</span>;</span><br></pre></td></tr></table></figure></li><li><p>空判断</p></li><li><p>is null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询身高为空的信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> height <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>is not null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询身高不为空的信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> height <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>排序</strong></p><ul><li>order by 字段</li><li>asc从小到大排序，即升序</li><li>desc从大到小排序，即降序<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询年龄在18到34岁之间的男性，按照年龄从小到大排序</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">18</span> <span class="keyword">and</span> <span class="number">34</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="comment">--按照年龄从小到大，身高从高到矮的排序</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>,height <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>聚合函数</strong></p><ul><li><p>count 总数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询男性有多少人，女性有多少人</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> students <span class="keyword">where</span> gender=<span class="string">"男"</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> students <span class="keyword">where</span> gender=<span class="string">"女"</span>;</span><br></pre></td></tr></table></figure></li><li><p>max 最大值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询最大年龄</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(age) <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li><li><p>min 最小值</p></li><li><p>sum 求和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--计算所有人的年龄总和</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(age) <span class="keyword">from</span> stundets;</span><br></pre></td></tr></table></figure></li><li><p>avg 平均值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--计算平均年龄</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(age) <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li><li><p>round 四舍五入 round(123.12,1)保留一位小数123.1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--计算所有人的平均年龄，保留2位小数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">avg</span>(age),<span class="number">2</span>) <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li></ul><p><strong>分组</strong></p><ul><li><p>group by</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--按照性别分组，查询所有的性别</span></span><br><span class="line"><span class="keyword">select</span> gender <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">--计算每种性别的人数</span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="keyword">count</span>(*) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">--计算男性的人数</span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="keyword">count</span>(*) <span class="keyword">from</span> students <span class="keyword">where</span> gender=<span class="string">"男"</span> <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure></li><li><p>group_concat(…)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询同种性别中的姓名,年龄,身高</span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="keyword">group_concat</span>(<span class="keyword">name</span>,<span class="string">","</span>,age,<span class="string">","</span>,height) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure></li><li><p>having</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询平均年龄超过30岁的性别，以及姓名</span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="keyword">group_concat</span>(<span class="keyword">name</span>) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender <span class="keyword">having</span> <span class="keyword">avg</span>(age)&gt;<span class="number">30</span>;</span><br><span class="line"><span class="comment">--查询每种性别中的人数多于2个的信息</span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="keyword">group_concat</span>(<span class="keyword">name</span>) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>分页</strong></p><ul><li>limit start,count<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--限制查询出来的数据个数</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">limit</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">--查询前5个数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">limit</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">--查询id6-10的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">--每页显示2个，显示第六页的信息，按照年龄从小到大排序</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> <span class="keyword">limit</span> <span class="number">10</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据的准备&quot;&gt;&lt;a href=&quot;#数据的准备&quot; class=&quot;headerlink&quot; title=&quot;数据的准备&quot;&gt;&lt;/a&gt;数据的准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;创建一个数据库&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基本操作</title>
    <link href="http://yoursite.com/2018/11/04/MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/11/04/MySQL基本操作/</id>
    <published>2018-11-04T12:03:42.000Z</published>
    <updated>2018-11-04T15:19:49.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h2><ul><li>mysql -u用户名 -p密码</li></ul><h2 id="退出数据库"><a href="#退出数据库" class="headerlink" title="退出数据库"></a>退出数据库</h2><ul><li>exit/quit/ctrl+d</li></ul><h2 id="显示数据库版本"><a href="#显示数据库版本" class="headerlink" title="显示数据库版本"></a>显示数据库版本</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();</span><br></pre></td></tr></table></figure><h2 id="显示时间"><a href="#显示时间" class="headerlink" title="显示时间"></a>显示时间</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selecct now();</span><br></pre></td></tr></table></figure><h2 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><ul><li>create database 数据库名 (charset=utf-8);<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database mydatabase;</span><br><span class="line">create database mydatabase charset=utf-8;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看创建数据库的语句"><a href="#查看创建数据库的语句" class="headerlink" title="查看创建数据库的语句"></a>查看创建数据库的语句</h2><ul><li>show create database 数据库名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database mydatabase;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看当前使用的数据库"><a href="#查看当前使用的数据库" class="headerlink" title="查看当前使用的数据库"></a>查看当前使用的数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();</span><br></pre></td></tr></table></figure><h2 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h2><ul><li>use 数据库名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mydatabase</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><ul><li>drop database 数据库名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database mydatabase;</span><br></pre></td></tr></table></figure></li></ul><h1 id="数据表的操作"><a href="#数据表的操作" class="headerlink" title="数据表的操作"></a>数据表的操作</h1><h2 id="查看当前数据库中所有表"><a href="#查看当前数据库中所有表" class="headerlink" title="查看当前数据库中所有表"></a>查看当前数据库中所有表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><ul><li>create table 数据表名字([字段，类型，约束],…)<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  age <span class="built_in">int</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h2><ul><li>desc 表名;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc students;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看表的创建语句"><a href="#查看表的创建语句" class="headerlink" title="查看表的创建语句"></a>查看表的创建语句</h2><ul><li>show create table 表名字;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table students;</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改表-添加字段"><a href="#修改表-添加字段" class="headerlink" title="修改表-添加字段"></a>修改表-添加字段</h2><ul><li>alter table 表名 add 列名 类型;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table students add birthday datetime;</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改表-修改字段：不重命名版"><a href="#修改表-修改字段：不重命名版" class="headerlink" title="修改表-修改字段：不重命名版"></a>修改表-修改字段：不重命名版</h2><ul><li>alter table 表名 modify 列名 类型及约束<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">modify</span> birthday <span class="built_in">date</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改表-修改字段：重命名版"><a href="#修改表-修改字段：重命名版" class="headerlink" title="修改表-修改字段：重命名版"></a>修改表-修改字段：重命名版</h2><ul><li>alter table 表名 change 原名 新名 类型及约束;<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">change</span> birthday birth <span class="built_in">date</span> dafault <span class="string">"2001-01-01"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="修改表-删除字段"><a href="#修改表-删除字段" class="headerlink" title="修改表-删除字段"></a>修改表-删除字段</h2><ul><li>alter table 表名 drop 列名;<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">drop</span> age;</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><ul><li>drop table 表名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> students;</span><br></pre></td></tr></table></figure></li></ul><h1 id="数据库增删改查-curd"><a href="#数据库增删改查-curd" class="headerlink" title="数据库增删改查(curd)"></a>数据库增删改查(curd)</h1><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><h3 id="全列插入"><a href="#全列插入" class="headerlink" title="全列插入"></a>全列插入</h3><ul><li>insert into 表名 values(…);<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">0</span>,<span class="string">"小王"</span>,<span class="string">"1991-02-14"</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="部分插入"><a href="#部分插入" class="headerlink" title="部分插入"></a>部分插入</h3><ul><li>insert into 表名 (列1，…) values(列1值,…);<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students (<span class="keyword">name</span>,birth) <span class="keyword">values</span>(<span class="string">"小张"</span>,<span class="string">"1993-12-22"</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="多行插入"><a href="#多行插入" class="headerlink" title="多行插入"></a>多行插入</h3><ul><li>insert into 表名 (列1，…) values(列1值,…),(列1值,…)…;</li><li>insert into 表名 values(列1值,…),(列1值,…)…；<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students (<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">"小红"</span>),(<span class="string">"小李"</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="keyword">default</span>,<span class="string">"大张"</span>,<span class="keyword">default</span>),(<span class="keyword">default</span>,<span class="string">"大王"</span>,<span class="keyword">default</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><ul><li>update 表名 set 列1=值1，列2=值2…where 条件;<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> students <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">"蜘蛛侠"</span>,birth=<span class="string">"2018-11-04"</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查询基本使用"><a href="#查询基本使用" class="headerlink" title="查询基本使用"></a>查询基本使用</h2><h3 id="查询所有列"><a href="#查询所有列" class="headerlink" title="查询所有列"></a>查询所有列</h3><ul><li>select * from 表名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li></ul><h3 id="按条件查询"><a href="#按条件查询" class="headerlink" title="按条件查询"></a>按条件查询</h3><ul><li>select * from 表名 where 条件;<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"蜘蛛侠"</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="查询指定列"><a href="#查询指定列" class="headerlink" title="查询指定列"></a>查询指定列</h3><ul><li>select 列1,列2,… from 表名;<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li></ul><h3 id="查询定别名"><a href="#查询定别名" class="headerlink" title="查询定别名"></a>查询定别名</h3><ul><li>select 字段 as 别名,字段 as 别名… from 表名;<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">as</span> 姓名, birth <span class="keyword">as</span> 生日 <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="物理删除"><a href="#物理删除" class="headerlink" title="物理删除"></a>物理删除</h3><ul><li>delete from 表名 where 条件;<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> students;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"蜘蛛侠"</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><ul><li>使用一个字段来表示这条信息已经不能使用了，查询时候加上已经删除的不查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> is_delete <span class="built_in">bit</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">update</span> students <span class="keyword">set</span> is_delete=<span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">6</span>;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库操作&quot;&gt;&lt;a href=&quot;#数据库操作&quot; class=&quot;headerlink&quot; title=&quot;数据库操作&quot;&gt;&lt;/a&gt;数据库操作&lt;/h1&gt;&lt;h2 id=&quot;链接数据库&quot;&gt;&lt;a href=&quot;#链接数据库&quot; class=&quot;headerlink&quot; title=&quot;链接数
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础-数据类型和约束</title>
    <link href="http://yoursite.com/2018/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E7%BA%A6%E6%9D%9F/"/>
    <id>http://yoursite.com/2018/11/01/数据库基础-数据类型和约束/</id>
    <published>2018-11-01T15:20:37.000Z</published>
    <updated>2018-11-01T16:30:02.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><strong>常见数据类型</strong></p><ul><li>整数:int,bit</li><li>小数:decimal</li><li>字符串:varchar,char</li><li>日期时间:date,time,datetime</li><li>枚举类型:enum<br><strong>特殊类型说明</strong></li><li>decimal表示浮点数,如decimal(3,2)表示共存3位数,小数占2位</li><li>char表示固定长度的字符串,如char(3),如果填充’ab’时会补一个空格为’ab ‘</li><li>varchar表示变长的字符串,如varchar(3)，如果填充’ab’，实际就是’ab’</li><li>text类型存储大文本字符串,当字符大于4000时推荐使用</li><li>更全的数据类型可以参考<a href="http://blog.csdn.net/anxpp/article/details/51284106" target="_blank" rel="noopener">这里</a></li></ul><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><ul><li>主键primary key:物理上存储的顺序</li><li>非空not null:此字段不允许填写空置</li><li>唯一unique:此字段的值不允许重复</li><li>默认default:当不填写此值时会使用默认值，如果填写时以填写为准</li><li>外键foreign key:对关系字段进行约束,当为关系字段填写值时,会到关联的表中查询此值是否存在,如果存在则填写成功,如果不存在则填写失败并抛出异常</li><li>说明:虽然外键约束可以保证数据的有效性,但是在进行数据的crud(增加，修改，删除，查询)时，都会降低数据库的性能,所以不推荐使用,那么数据的有效性怎么保证呢？答:可以在逻辑层进行控制</li></ul><h1 id="数值类型归类-常用"><a href="#数值类型归类-常用" class="headerlink" title="数值类型归类(常用)"></a>数值类型归类(常用)</h1><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">字节大小</th><th style="text-align:left">有符号范围(signed)</th><th style="text-align:left">无符号范围(unsigned)</th></tr></thead><tbody><tr><td style="text-align:center">TINYINT</td><td style="text-align:left">1</td><td style="text-align:left">-128~127</td><td style="text-align:left">0~255</td></tr><tr><td style="text-align:center">SMALLINT</td><td style="text-align:left">2</td><td style="text-align:left">-32768~32767</td><td style="text-align:left">0~65535</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:left">3</td><td style="text-align:left">-8388608~8388607</td><td style="text-align:left">0~16777215</td></tr><tr><td style="text-align:center">INT/INTEGER</td><td style="text-align:left">4</td><td style="text-align:left">-2147483648~2147483647</td><td style="text-align:left">0~4294967295</td></tr><tr><td style="text-align:center">BITINT</td><td style="text-align:left">8</td><td style="text-align:left">-9223372036854775808~9223372036854775807</td><td style="text-align:left">0~18446744073709551615</td></tr></tbody></table><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">字节大小</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center">CHAR</td><td style="text-align:left">0~255</td><td style="text-align:left">类型:char(3)输入’ab’,实际存储为’ab ‘,输入’abcd’ 实际存储为 ‘abc’</td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:left">0~255</td><td style="text-align:left">类型:varchar(3) 输 ‘ab’,实际存储为’ab’, 输入’abcd’,实际存储为’abc’</td></tr><tr><td style="text-align:center">TEXT</td><td style="text-align:left">0~65535</td><td style="text-align:left">大文本</td></tr></tbody></table><h1 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h1><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">字节大小</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center">DATE</td><td style="text-align:left">4</td><td style="text-align:left">‘2018-11-01’</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:left">3</td><td style="text-align:left">‘0:08:00’</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:left">8</td><td style="text-align:left">‘2018-11-01 0:08:00’</td></tr><tr><td style="text-align:center">YEAR</td><td style="text-align:left">1</td><td style="text-align:left">‘2017’</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:left">4</td><td style="text-align:left">‘1920-01-01 00:00:01’UTC~’2038-01-01 00:00:01’UTC</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;常见数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数:int,bit&lt;/li&gt;
&lt;li&gt;小数:de
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>网络传输大小端问题</title>
    <link href="http://yoursite.com/2018/10/30/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%A4%A7%E5%B0%8F%E7%AB%AF%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/30/网络传输大小端问题/</id>
    <published>2018-10-30T13:14:05.000Z</published>
    <updated>2018-11-01T15:12:59.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络传输大小端问题"><a href="#网络传输大小端问题" class="headerlink" title="网络传输大小端问题"></a>网络传输大小端问题</h1><p><strong>我们在边写linux网络编程的时候经常会使用htonl htons等函数用来对int类型 long类型的数据进行本地字节序和网络字节序的转换，而对于字符串类型的数据，就不需要转换呢？</strong></p><ul><li>网络上传输的数据都是字节流,对于一个多字节数值,在进行网络传输的时候,先传递哪个字节?其实是按照传输数据的内存地址由低到高来进行传输的。</li></ul><p><strong>在验证上面这一个问题之前，先来看一下大小端的问题</strong></p><ul><li>小端字节序是我们比较常见的字节序，个人使用的x86计算机大部分使用小端字节序，其实很好理解,小端法(Little-Endian)就是低位字节排放在内存的低地址端(即该值的起始地址),高位字节排放在内存的高地址端;</li><li>大端法(Big-Endian)就是高位字节排放在内存的低地址端(即该值的起始地址),低位字节排放在内存的高地址端</li><li>就比如 0x12345678 这个十六进制数字，低位在最右边(理解一下十进制中12345678，从右往左是不是个十百千…)，小端存储法就是0x78在低地址，0x12在高地址;大端0x78在高地址，0x12在低地址，可以用下面这一段代码看看自己是不是小端字节序.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> val = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="keyword">char</span> *pVal = (<span class="keyword">char</span>*)&amp;val;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x %x %x %x\n"</span>,*(pVal+<span class="number">0</span>),*(pVal+<span class="number">1</span>),*(pVal+<span class="number">2</span>),*(pVal+<span class="number">3</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果是:78 56 34 12,证明了我使用的这台计算机是小端字节序</li></ul><p><strong>那么字符串在内存中存储形式是怎么样的呢？</strong></p><ul><li>比如”Hello”这个字符串，在内存中则是按照字符串本身从左往右顺序存储，’H’在前，’o’在后。这个则没必要写代码来验证了，太简单…</li></ul><p><strong>有了以上基础知识,那么便可以说明第一个问题了</strong></p><ul><li>网络上传输数据是按内存地址从低到高按顺序传输,那么传输”Hello”这个字符串的时候，就是按照”H” “e” “l” “l” “o”的顺序依次传输，对方接收的话，也是按照这个顺序把数据存入缓存区,字符串不涉及到大小端存储的规则，所以无需调用字节序转换函数来处理。</li><li>如果是 0x12345678 这个数据，那么则是按照0x78 0x56 0x34 0x12这个顺序按字节发送(16进制2位则是一个字节),对方机器如果收到后用int类型来解释这个数据，如果对方机器是小端字节序，那么没问题，收到的数据还是0x12345678，但是如果对方机器是大端字节序,用int来解释则会把高地址数据放在低位 低地址放在高位，变成了0x78563412,就会发生不想要的结果。</li></ul><p><strong>结论</strong></p><ul><li>所以在字节序相同的平台时间传输数据，进行转换字节序是没必要的，而在不同平台之间，则一定要进行转换</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络传输大小端问题&quot;&gt;&lt;a href=&quot;#网络传输大小端问题&quot; class=&quot;headerlink&quot; title=&quot;网络传输大小端问题&quot;&gt;&lt;/a&gt;网络传输大小端问题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;我们在边写linux网络编程的时候经常会使用htonl htons等
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>JDSpider使用文档</title>
    <link href="http://yoursite.com/2018/10/30/JDSpiderReadme/"/>
    <id>http://yoursite.com/2018/10/30/JDSpiderReadme/</id>
    <published>2018-10-29T16:03:25.000Z</published>
    <updated>2018-11-01T16:35:27.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDSpider介绍"><a href="#JDSpider介绍" class="headerlink" title="JDSpider介绍"></a>JDSpider介绍</h1><ul><li>JDSpider是一个Python写的京东抢券程序<a href="https://github.com/hongningexpro/JDSpider" target="_blank" rel="noopener">源码</a></li></ul><h1 id="配置文件使用"><a href="#配置文件使用" class="headerlink" title="配置文件使用"></a>配置文件使用</h1><h2 id="Account-txt文件说明"><a href="#Account-txt文件说明" class="headerlink" title="Account.txt文件说明"></a>Account.txt文件说明</h2><ul><li>这是账号cookies配置文件,必须按照指定格式配置</li><li>格式: 账号名—-这里随意填写—-cookies</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如:</span><br><span class="line">18959273396----11----abtest=20181028143048053_24; mobilev=html5; sid=84964d12b0e88cf2e3545d93cb8d9925;</span><br></pre></td></tr></table></figure><h2 id="Ticket-json文件说明"><a href="#Ticket-json文件说明" class="headerlink" title="Ticket.json文件说明"></a>Ticket.json文件说明</h2><ul><li>这是优惠券信息文件</li><li>格式如下<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"东券非自营手机"</span>,</span><br><span class="line">    <span class="attr">"key"</span>:<span class="string">"ac496b99aa3b4fde8562ba3e14646cb2"</span>,</span><br><span class="line">    <span class="attr">"id"</span>:<span class="string">"15196163"</span>,</span><br><span class="line">    "starttime":"2018-10-28 21:16:00.950",  小数点后面为毫秒数</span><br><span class="line">    "submitcnt":"3",提交次数</span><br><span class="line">    "submitinterval":"200"提交间隔</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="YDMConfig-json文件说明"><a href="#YDMConfig-json文件说明" class="headerlink" title="YDMConfig.json文件说明"></a>YDMConfig.json文件说明</h2><ul><li>云打码平台配置文件</li><li>格式如下<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "username":"hn_user",    云打码账号名</span><br><span class="line">    "password":"xxxxxx", 账号密码</span><br><span class="line">    "appid":6017, 开发者软件id</span><br><span class="line">    "appkey":"903e515dfee0a2bcabfd4a7f9a5d3daa"开发者软件秘钥</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h1><ul><li>抢券结束后在Log目录下会生成response_log.txt  和 result_log.txt文件</li><li>response_log.txt 记录了请求京东服务器对方给的回应</li><li>result_log.txt 记录了抢券结果，如果有账号成功领取到才会有记录</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JDSpider介绍&quot;&gt;&lt;a href=&quot;#JDSpider介绍&quot; class=&quot;headerlink&quot; title=&quot;JDSpider介绍&quot;&gt;&lt;/a&gt;JDSpider介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;JDSpider是一个Python写的京东抢券程序&lt;a href
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>
